{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "Innosoft ReST API",
    "description": "This is the technical specification of the Innosoft ReST API.\nFor general explanations, guides and other documentation see [here](https://innosoft.de).\n\n---\n## General notes\n* You can download this OpenAPI spec (fka Swagger) as [OAS3.0](https://innosoft.de) or [OAS2.0](https://innosoft.de) file. It can be used for tooling like code generation.\n* Some fields may require a reference value to an Innosoft database field. The reference target will be shown in capital letters with the syntax `TABLENAME.COLUMNNAME`.\n* If not further described, the type `integer` shall be interpreted as 32 bit integer.\n* If not further described, ID properties in the request body will be ignored, if they are already present in the URL (as path parameters).\n* Retrieving lists of resource references will only contain items you have read access to.\n",
    "contact": {
      "name": "Innosoft GmbH",
      "url": "https://innosoft.de",
      "email": "info@innosoft.de"
    }
  },
  "servers": [
    {
      "url": "http://example.com/api",
      "description": "test description for configured server."
    }
  ],
  "tags": [
    {
      "name": "Addresses",
      "description": "Generalized operations for debtors and locations."
    },
    {
      "name": "Addresses\\Assignments",
      "description": "Address assignments are used for the delegation of tasks and the allocation of resources to an address."
    },
    {
      "name": "Addresses\\Contact persons",
      "description": "Contact persons of a specific address."
    },
    {
      "name": "Assignments",
      "description": "Generalized operations for absent-, address-, internal- and project assignments."
    },
    {
      "name": "Contact persons",
      "description": "Individuals that represent an organization."
    },
    {
      "name": "Debtors",
      "description": "Debtors represent organizational entities which can handle the financial activities."
    },
    {
      "name": "Direct Database Access",
      "description": "Low level functionality for working with database tables."
    },
    {
      "name": "Documents",
      "description": "A document is a description (metadata) of a file that can be attached to certain domain objects. The file itself is not a part of a document."
    },
    {
      "name": "Documents\\Attachments",
      "description": "An attachment represents the link between a document and other resources, such as projects and machines."
    },
    {
      "name": "Invoicable Service Reports",
      "description": "Service reports that are available for invoicing. They contain information about working times,  cash expenses and materials for a given assignment.\n"
    },
    {
      "name": "Locations",
      "description": "Locations represent the hierarchical structure of organizations."
    },
    {
      "name": "Machines",
      "description": "Machines can be representations of physical machines or machine parts."
    },
    {
      "name": "Projects",
      "description": "Projects represent data for the planning of services in your company."
    },
    {
      "name": "Projects\\Assignments",
      "description": "Project assignments are used for the delegation of tasks and the allocation of resources to a project or an order."
    },
    {
      "name": "Projects\\Assignments\\Machines",
      "description": "Assignment machines are links between existing machines and a project assignment."
    },
    {
      "name": "Projects\\Contact persons",
      "description": "Project contact persons are links between existing contact persons and a project."
    },
    {
      "name": "Projects\\Machines",
      "description": "Project machines are links between existing machines and a project."
    },
    {
      "name": "Projects\\Materials",
      "description": "Project materials are links between existing materials and a project."
    },
    {
      "name": "Resources\\Absent assignments",
      "description": "Absent assignments represent periods when a resource is not available for other assignments."
    },
    {
      "name": "Resources\\Internal assignments",
      "description": "Internal assignments are used for the delegation of internal tasks which do not belong to a project or an address."
    },
    {
      "name": "Spare parts",
      "description": "Spare parts include all materials that can be used to carry out assignments."
    },
    {
      "name": "Tickets",
      "description": "Tickets are used to capture, assign and resolve issues."
    },
    {
      "name": "Tickets\\Texts",
      "description": "Internal-, solution- and issuetexts of a ticket."
    }
  ],
  "paths": {
    "/addresses/searches": {
      "post": {
        "operationId": "searchAddresses",
        "tags": [
          "Addresses"
        ],
        "summary": "Search addresses.",
        "description": "Execute a dynamic search for locations and debtors at once, as both resource types share the same basic properties.",
        "requestBody": {
          "required": true,
          "description": "A list of range entries to specify the search criterias.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RangeEntry"
                }
              },
              "example": [
                {
                  "mode": "I",
                  "operation": "Eq",
                  "fieldname": "address.street",
                  "low": "%Weg 15",
                  "high": null
                },
                {
                  "mode": "E",
                  "operation": "Gt",
                  "fieldname": "type",
                  "low": 2,
                  "high": null
                }
              ]
            }
          }
        },
        "responses": {
          "201": {
            "description": "The search has been executed successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceReferences"
                },
                "example": {
                  "itemCount": 3,
                  "items": [
                    {
                      "url": "/api/locations/15",
                      "isValid": true
                    },
                    {
                      "url": "/api/debtors/17",
                      "isValid": true
                    },
                    {
                      "url": "/api/debtors/231",
                      "isValid": false
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Possible error codes are:\n* ADS-C-0001 | The referenced field does not exist in the entities you are searching for.\n* ADS-C-0002 | Invalid operation.\n* ADS-C-0003 | Invalid mode.\n* ADS-C-0004 | Value in *low* is not valid (wrong data type).\n* ADS-C-0005 | Value in *high* is not valid (wrong data type).\n* ADS-C-1000 | Malformed JSON content.\n* ADS-C-1001 | No content provided in the body of the request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "ADS-C-0003",
                    "message": "Invalid mode."
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* ADS-C-0000 | You have insufficient permissions to search for addresses.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "ADS-C-0000",
                    "message": "You have insufficient permissions to search for addresses."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/addresses/{addressId}/contactPersons": {
      "parameters": [
        {
          "$ref": "#/components/parameters/addressId"
        }
      ],
      "get": {
        "operationId": "getContactPersonsForAddress",
        "tags": [
          "Addresses\\Contact persons"
        ],
        "summary": "List all contact persons for an address.",
        "description": "Retrieve an object with a collection of resource references to all contact persons of a  specific address (which can be a debtor or a location).\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceReferences"
                },
                "example": {
                  "itemCount": 2,
                  "items": [
                    {
                      "url": "/api/contactPersons/15",
                      "isValid": true
                    },
                    {
                      "url": "/api/contactPersons/16",
                      "isValid": false
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* COP-A-0000 | You have insufficient permissions to read contact persons.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "COP-A-0000",
                    "message": "You either have insufficient permissions to read contact persons or reading is disabled in general."
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not found. Possible error codes are:\n* COP-A-0005 | The address which is referenced in the URL does not exist.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "COP-A-0005",
                    "message": "The address which is referenced in the URL does not exist."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/addresses/{addressId}/assignments": {
      "parameters": [
        {
          "$ref": "#/components/parameters/addressId"
        }
      ],
      "get": {
        "operationId": "getAllAssignmentsForAddress",
        "tags": [
          "Addresses\\Assignments"
        ],
        "summary": "List all assignments for an address.",
        "description": "Retrieve references to all assignments of a specific address.\n\nYou can use optional query parameters to filter by a specific time frame. Examples:\n* /api/addresses/42/assignments?since=2015-10-16\n* /api/addresses/42/assignments?until=2015-12-31T23:59:59\n* /api/addresses/42/assignments?since=2015-10-16&until=2015-10-31\n\n**Note:** Timezones are not supported, so the time should be converted to the local timezone of the database server first.    \n",
        "parameters": [
          {
            "name": "since",
            "in": "query",
            "description": "Optional filter \"since\" in the format YYYY-MM-DD[Thh:mm:ss]. Matches the property *begin*.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "until",
            "in": "query",
            "description": "Optional filter \"until\" in the format YYYY-MM-DD[Thh:mm:ss]. Matches the property *end*.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceReferences"
                },
                "example": {
                  "count": 3,
                  "items": [
                    {
                      "url": "/api/addresses/47/assignments/3",
                      "isValid": true
                    },
                    {
                      "url": "/api/addresses/47/assignments/4",
                      "isValid": true
                    },
                    {
                      "url": "/api/addresses/47/assignments/5",
                      "isValid": false
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Possible error codes are:\n* AAS-A-0017 | One of the date parameters in the URL is outside of the supported range ('1753-01-01' - '9999-12-31T23:59:59').\n* AAS-A-1002 | One of the date parameters could not be parsed, because the format is invalid or the date itself does not exist.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "AAS-A-1002",
                    "message": "\"2015-06-31\" is not a valid date."
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* AAS-A-0000 | You have insufficient permissions to read assignments.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "AAS-A-0000",
                    "message": "You have insufficient permissions to read assignments."
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not Found. Possible error codes are:\n* AAS-A-0005 | A referenced entity could not be found.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "AAS-A-0005",
                    "message": "The address \"49\" does not exist."
                  }
                ]
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createAddressAssignment",
        "tags": [
          "Addresses\\Assignments"
        ],
        "summary": "Create a new address assignment.",
        "description": "Submit a new address assignment to Innosoft. Omit fields marked as readOnly. The response will contain the generated values.",
        "requestBody": {
          "required": true,
          "description": "The assignment resource that will be added to Innosoft. The field *addressId* will be ignored as the path parameter is leading.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddressAssignment"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The address assignment has been created successfully.",
            "headers": {
              "Location": {
                "description": "Link to the created resource.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressAssignment"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Possible error codes are:\n* AAS-C-0002 | A mandatory field is missing.\n* AAS-C-0003 | An assignment with the given id already exists.\n* AAS-C-0005 | A referenced entity could not be found.\n* AAS-C-0006 | At least one field has exceeded the allowed character length.\n* AAS-C-0007 | The referenced code exists but is invalid for an address assignment.\n* AAS-C-0009 | The referenced entity is invalid.\n* AAS-C-0010 | The referenced entity is inactive.\n* AAS-C-0015 | The status of the address is inactive.\n* AAS-C-0016 | A DateTime property has invalid values (i.e. month = 0 or minute = 60).\n* AAS-C-0017 | A DateTime property is outside of the allowed range (i.e. year = 1752).\n* AAS-C-0018 | The time frame between begin and end is less than 15 minutes or the DateTime which marks the end of the time frame is before the begin.\n* AAS-C-1000 | Malformed JSON content.\n* AAS-C-1001 | No content provided in the body of the request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "AAS-C-0006",
                    "message": "The property 'remark' cannot have more than 33 characters."
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* AAS-C-0000 | You have insufficient permissions to create assignments in general or you do not have write access  to the group and main group of the assignment or the referenced resource. This error code is also possible if you  try to set the *statusId* and do not have the right to edit the status of an assignment.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "AAS-C-0000",
                    "message": "You have insufficient permissions to create address assignments."
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not Found. Possible error codes are:\n* AAS-C-0005 | A referenced entity could not be found.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "AAS-C-0005",
                    "message": "The address \"49\" does not exist."
                  }
                ]
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Known error codes are:\n* AAS-C-0001 | The number range is exceeded.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "AAS-C-0001",
                    "message": "The number range is exceeded."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/addresses/{addressId}/assignments/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/addressId"
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "Unique identifier of an address assignment.",
          "schema": {
            "type": "integer"
          }
        }
      ],
      "get": {
        "operationId": "getAddressAssignment",
        "tags": [
          "Addresses\\Assignments"
        ],
        "summary": "Get address assignment by id.",
        "description": "Retrieve the data of a single assignment by its id.",
        "parameters": [
          {
            "name": "toUTC",
            "in": "query",
            "description": "If you want to get the ExtendedDateTime properties of the assignment in UTC you can add this query parameter. For example:\n* /api/addresses/47/assignments/3?toUTC=true\n",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressAssignment"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* AAS-R-0000 | You have insufficient permissions to read assignments in general or you do not have the right  to access the group and main group of the assignment or the resource referenced by the assignment.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "AAS-R-0000",
                    "message": "You have insufficient permissions to read assignments."
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not Found. Possible error codes are:\n* AAS-R-0005 | A referenced entity could not be found.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "AAS-R-0005",
                    "message": "The address \"49\" does not exist."
                  }
                ]
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Possible if a general error has occurred or if the assignment could be found in the database  but has invalid data. This is possible if the data was written by another system which has less validation rules.  Please check the protocol file of the server for more information.\n"
          }
        }
      },
      "put": {
        "operationId": "putAddressAssignment",
        "tags": [
          "Addresses\\Assignments"
        ],
        "summary": "Create or update an address assignment.",
        "description": "Update an address assignment resource if it already exists. Otherwise it will be created.",
        "requestBody": {
          "required": true,
          "description": "The address assignment resource. The properties *addressId* and *id* will be ignored as the path parameters are leading.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddressAssignment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The address assignment has been updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressAssignment"
                }
              }
            }
          },
          "201": {
            "description": "The address assignment has been created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressAssignment"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.\nPossible error codes for Update are:\n* AAS-U-0002 | A mandatory field is missing.\n* AAS-U-0005 | A referenced entity could not be found.\n* AAS-U-0006 | At least one field has exceeded the allowed character length.\n* AAS-U-0007 | The referenced code exists but is invalid for an address assignment.\n* AAS-U-0009 | The referenced entity is invalid.\n* AAS-U-0010 | The referenced entity is inactive.\n* AAS-U-0015 | The status of the address is inactive.\n* AAS-U-0016 | A DateTime property has invalid values (i.e. month = 0 or minute = 60).\n* AAS-U-0017 | A DateTime property is outside of the allowed range (i.e. year = 1752).\n* AAS-U-0018 | The time frame between begin and end is less than 15 minutes or the DateTime which marks the end of the time frame is before the begin.\n* AAS-U-0019 | The status of the old state of the assignment does not allow editing. You can not edit the assignment unless you reference a status which allows editing again.\n* AAS-U-1000 | Malformed JSON content.\n* AAS-U-1001 | No content provided in the body of the request.\n\nPossible error codes for Create are:\n* AAS-C-0002 | A mandatory field is missing.\n* AAS-C-0005 | A referenced entity could not be found.\n* AAS-C-0006 | At least one field has exceeded the allowed character length.\n* AAS-C-0007 | The referenced code exists but is invalid for an address assignment.\n* AAS-C-0009 | The referenced entity is invalid.\n* AAS-C-0010 | The referenced entity is inactive.\n* AAS-C-0015 | The status of the address is inactive.\n* AAS-C-0016 | A DateTime property has invalid values (i.e. month = 0 or minute = 60).\n* AAS-C-0017 | A DateTime property is outside of the allowed range (i.e. year = 1752).\n* AAS-C-0018 | The time frame between begin and end is less than 15 minutes or the DateTime which marks the end of the time frame is before the begin.\n* AAS-C-1000 | Malformed JSON content.\n* AAS-C-1001 | No content provided in the body of the request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "AAS-U-0006",
                    "message": "The property 'remark' cannot have more than 33 characters."
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* AAS-U-0000 | You have insufficient permissions to update assignments in general or you do not have write  access to the group and main group of the assignment or the referenced resource. This also applies to the  old state of the assignment (i.e. you can not move an assignment from one resource to another if you have  no rights to edit the group of the old resource). This error code is also possible if you try to set the  statusId and do not have the right to edit the status of an assignment.\n* AAS-C-0000 | You have insufficient permissions to create assignments in general or you do not have write  access to the group and main group of the assignment or the referenced resource. This error code is also  possible if you try to set the statusId and do not have the right to edit the status of an assignment.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "AAS-U-0000",
                    "message": "You have insufficient permissions to update assignments."
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not Found. Possible error codes are:\n* AAS-C-0005 | A referenced entity could not be found.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "AAS-C-0005",
                    "message": "The address \"49\" does not exist."
                  }
                ]
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteAddressAssignment",
        "tags": [
          "Addresses\\Assignments"
        ],
        "summary": "Delete an address assignment.",
        "description": "Delete a single address assignment.",
        "responses": {
          "204": {
            "description": "The address assignment has been deleted successfully."
          },
          "400": {
            "description": "Bad Request. Possible error codes are:\n* AAS-D-0001 | The assignment is already referenced by an other entity (i.e. service reports).\n* AAS-D-0015 | The status of the address is inactive.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "ABS-D-0001",
                    "message": "The status of the address is inactive."
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* AAS-D-0000 | You have insufficient permissions to delete assignments in general or you do not have the right to access the group and main group of the assignment or the resource referenced by the assignment.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "AAS-D-0000",
                    "message": "You have insufficient permissions to delete address assignments."
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not Found. Possible error codes are:\n* AAS-D-0005 | A referenced entity could not be found.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "ABS-D-0005",
                    "message": "The address \"49\" does not exist."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/assignments": {
      "get": {
        "operationId": "getAllAssignments",
        "tags": [
          "Assignments"
        ],
        "summary": "List all assignments.",
        "description": "Retrieve an object with a collection of resource references to all projects to which you have read access.\n\nYou can use optional query parameters to filter by a specific time frame. Examples:\n* /api/assignments?since=2015-10-16\n* /api/assignments?until=2015-12-31T23:59:59\n* /api/assignments?since=2015-10-16&until=2015-10-31\n\n**Note:** Timezones are not supported, so the time should be converted to the local timezone of the database server first.\n",
        "parameters": [
          {
            "name": "since",
            "in": "query",
            "description": "Optional filter \"since\" in the format YYYY-MM-DD[Thh:mm:ss].",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "until",
            "in": "query",
            "description": "Optional filter \"until\" in the format YYYY-MM-DD[Thh:mm:ss].",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceReferences"
                },
                "example": {
                  "count": 3,
                  "items": [
                    {
                      "url": "/api/projects/47/assignments/3",
                      "isValid": true
                    },
                    {
                      "url": "/api/addresses/42/assignments/2",
                      "isValid": true
                    },
                    {
                      "url": "/api/resources/0001/assignments/absent/9001",
                      "isValid": false
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Possible error codes are:\n* ASS-A-0017 | One of the date parameters in the URL is outside of the supported range ('1753-01-01' - '9999-12-31T23:59:59').\n* ASS-A-1002 | One of the date parameters could not be parsed, because the format is invalid or the date itself does not exist.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "ASS-A-1002",
                    "message": "\"2015-06-31\" is not a valid date."
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* ASS-A-0000 | You have insufficient permissions to read assignments.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "ASS-A-0000",
                    "message": "You either have insufficient permissions to read assignments or reading is disabled in general."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/contactPersons": {
      "post": {
        "operationId": "createContactPerson",
        "tags": [
          "Contact persons"
        ],
        "summary": "Create a new contact person.",
        "description": "Submit a new contact person to Innosoft. Omit fields marked as readOnly. The response will contain the generated values.",
        "requestBody": {
          "required": true,
          "description": "The contact person resource that will be added to Innosoft.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactPerson"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The contact person has been created successfully.",
            "headers": {
              "Location": {
                "description": "Link to the created resource.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactPerson"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Possible error codes are:\n* COP-C-0002 | A mandatory field is missing.\n* COP-C-0003 | The committed id is already used by another object.\n* COP-C-0005 | A referenced entity could not be found.\n* COP-C-0006 | At least one field has exceeded the allowed character length.\n* COP-C-1000 | Malformed JSON content.\n* COP-C-1001 | No content provided in the body of the request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "COP-C-0006",
                    "message": "The property 'title' cannot have more than 33 characters."
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* COP-C-0000 | You have insufficient permissions to create the contact person.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "COP-C-0000",
                    "message": "You either have insufficient permissions to create the contact person or creating is disabled in general."
                  }
                ]
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Known error codes are:\n* COP-C-0001 | The number range is exceeded.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "COP-C-0001",
                    "message": "The number range is exceeded."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/contactPersons/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "Unique identifier of a contact person.",
          "schema": {
            "type": "integer"
          }
        }
      ],
      "get": {
        "operationId": "getContactPerson",
        "tags": [
          "Contact persons"
        ],
        "summary": "Get contact person by id.",
        "description": "Retrieve the data of a single contact person by its id.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactPerson"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* COP-R-0000 | You have insufficient permissions to read the contact person.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "COP-R-0000",
                    "message": "You either have insufficient permissions to read the contact person or reading is disabled in general."
                  }
                ]
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Possible if a general error has occurred or if the contact person could be found in the database  but has invalid data. This is possible if the data was written by another system which has less validation rules.  Please check the protocol file of the server for more information.\n"
          }
        }
      },
      "put": {
        "operationId": "putContactPerson",
        "tags": [
          "Contact persons"
        ],
        "summary": "Create or update a contact person.",
        "description": "Update a contact person resource if it already exists. Otherwise it will be created.",
        "requestBody": {
          "required": true,
          "description": "The contact person resource. If the property *id* is sent in the request it will be ignored because the id in the URL is leading.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactPerson"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The contact person has been updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactPerson"
                }
              }
            }
          },
          "201": {
            "description": "The contact person has been created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactPerson"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.\nPossible error codes for Update are:\n* COP-U-0002 | A mandatory field is missing.\n* COP-U-0005 | A referenced entity could not be found.\n* COP-U-0006 | At least one field has exceeded the allowed character length.\n* COP-U-1000 | Malformed JSON content.\n* COP-U-1001 | No content provided in the body of the request.             \n\nPossible error codes for Create are:\n* COP-C-0002 | A mandatory field is missing.\n* COP-C-0005 | A referenced entity could not be found.\n* COP-C-0006 | At least one field has exceeded the allowed character length.\n* COP-C-1000 | Malformed JSON content.\n* COP-C-1001 | No content provided in the body of the request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "COP-U-0006",
                    "message": "The property 'title' cannot have more than 33 characters."
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* COP-U-0000 | You have insufficient permissions to update the contact person.\n* COP-C-0000 | You have insufficient permissions to create the contact person.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "COP-U-0000",
                    "message": "You either have insufficient permissions to update the contact person or updating is disabled in general."
                  }
                ]
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteContactPerson",
        "tags": [
          "Contact persons"
        ],
        "summary": "Delete a contact person.",
        "description": "Delete a single contact person.",
        "responses": {
          "204": {
            "description": "The contact person has been deleted successfully."
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* COP-D-0000 | You have insufficient permissions to delete the contact person.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "COP-D-0000",
                    "message": "You either have insufficient permissions to delete the contact person or deleting is disabled in general."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/contactPersonAddressChanges": {
      "post": {
        "operationId": "changeAddressOfContactPerson",
        "tags": [
          "Contact persons"
        ],
        "summary": "Change address of a contact person.",
        "description": "Reassign a contact person to another address. **Internally the contact person will be copied.** The old contact person will be set to inactive and the new contact person will be returned  in the response. You can do the same by doing a PUT request with the complete updated contact  person in the request body to /api/contactPersons/{id}.\n",
        "requestBody": {
          "required": true,
          "description": "The address change resource which contains the necessary information for this operation.",
          "content": {
            "application/json": {
              "schema": {
                "title": "Address change",
                "type": "object",
                "required": [
                  "contactPersonId",
                  "newAddress"
                ],
                "properties": {
                  "contactPersonId": {
                    "type": "integer",
                    "description": "Unique identifier for the contact person u want to reassign to a new address."
                  },
                  "newAddress": {
                    "type": "string",
                    "maxLength": 20,
                    "description": "Reference to the *id* of the new address (location or debtor)."
                  }
                }
              },
              "example": {
                "contactPersonId": 15,
                "newAddress": "DE-977"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The address of the contact person has been changed successfully.",
            "headers": {
              "Location": {
                "description": "Link to the created resource.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactPerson"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Possible error codes are:\n* CAC-C-0002 | A mandatory field is missing.\n* CAC-C-0005 | A referenced entity could not be found.\n* CAC-C-0006 | At least one field has exceeded the allowed character length.\n* CAC-C-1000 | Malformed JSON content.\n* CAC-C-1001 | No content provided in the body of the request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "CAC-C-0006",
                    "message": "The property 'newAddress' cannot have more than 20 characters."
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* CAC-C-0000 | You have insufficient permissions to change the address of contact persons.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "CAC-C-0000",
                    "message": "You have insufficient permissions to change the address of contact persons."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/db/info": {
      "get": {
        "operationId": "getDbInfo",
        "tags": [
          "Direct Database Access"
        ],
        "summary": "Get info of active database connection.",
        "description": "Retrieve information about the active database connection. This is essentially a  structured representation of the connection string.\n",
        "responses": {
          "200": {
            "description": "OK. Note that for obvious security reasons the password does not get displayed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "DbInfo",
                  "properties": {
                    "data Source": {
                      "type": "string",
                      "description": ""
                    },
                    "initial Catalog": {
                      "type": "string",
                      "description": ""
                    },
                    "user ID": {
                      "type": "string",
                      "description": ""
                    },
                    "password": {
                      "type": "string",
                      "description": ""
                    }
                  }
                },
                "example": {
                  "data Source": "your/host",
                  "initial Catalog": "your_Catalog",
                  "user ID": "SomeUser",
                  "password": "********"
                }
              }
            }
          }
        }
      }
    },
    "/debtors": {
      "post": {
        "operationId": "createDebtor",
        "tags": [
          "Debtors"
        ],
        "summary": "Create a new debtor.",
        "description": "Submit a new debtor to Innosoft. Omit fields marked as readOnly. The response will contain the generated values.",
        "requestBody": {
          "required": true,
          "description": "The debtor resource that will be added to Innosoft.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Debtor"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The debtor has been created successfully.",
            "headers": {
              "Location": {
                "description": "Link to the created resource.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Debtor"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Possible error codes are:        \n* DEB-C-0002 | A mandatory field is missing.\n* DEB-C-0003 | The committed id is already used by another object.\n* DEB-C-0004 | The parent location/debtor does not exist.\n* DEB-C-0005 | A referenced entity could not be found.\n* DEB-C-0006 | At least one field has exceeded the allowed character length.\n* DEB-C-0007 | The referenced type exists but is invalid for a debtor.\n* DEB-C-0112 | The id of the external timezone is unkown.\n* DEB-C-1000 | Malformed JSON content.\n* DEB-C-1001 | No content provided in the body of the request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "DEB-C-0006",
                    "message": "The property 'name' cannot have more than 33 characters."
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* DEB-C-0000 | You have insufficient permissions to create the debtor.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "DEB-C-0000",
                    "message": "You either have insufficient permissions to create the debtor or creating is disabled in general."
                  }
                ]
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Known error codes are:\n* DEB-C-0001 | The number range is exceeded.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "DEB-C-0001",
                    "message": "The number range is exceeded."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/debtors/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "Unique identifier of a debtor.",
          "schema": {
            "type": "string",
            "maxLength": 20
          }
        }
      ],
      "get": {
        "operationId": "getDebtor",
        "tags": [
          "Debtors"
        ],
        "summary": "Get debtor by id.",
        "description": "Retrieve the data of a single debtor by its id.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Debtor"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Possible error codes are:\n* DEB-R-0022 | The requested resource is not a debtor but a location.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "DEB-R-0022",
                    "message": "The requested resource is not a debtor but a location."
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* DEB-R-0000 | You have insufficient permissions to read the debtor.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "DEB-R-0000",
                    "message": "You either have insufficient permissions to read the debtor or reading is disabled in general."
                  }
                ]
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Possible if a general error has occurred or if the debtor could be found in the database  but has invalid data. This is possible if the data was written by another system which has less validation rules.  Please check the protocol file of the server for more information.\n"
          }
        }
      },
      "put": {
        "operationId": "putDebtor",
        "tags": [
          "Debtors"
        ],
        "summary": "Create or update a debtor.",
        "description": "Update a debtor resource if it already exists. Otherwise it will be created.",
        "requestBody": {
          "required": true,
          "description": "The debtor resource. If the property *id* is sent in the request it will be ignored because the id in the URL is leading.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Debtor"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The debtor has been updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Debtor"
                }
              }
            }
          },
          "201": {
            "description": "The debtor has been created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Debtor"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.\nPossible error codes for Update are:\n* DEB-U-0002 | A mandatory field is missing.\n* DEB-U-0004 | The parent location/debtor does not exist.\n* DEB-U-0005 | A referenced entity could not be found.\n* DEB-U-0006 | At least one field has exceeded the allowed character length.\n* DEB-U-0007 | The referenced type exists but is invalid for a debtor.\n* DEB-U-0112 | The id of the external timezone is unknown.\n* DEB-U-1000 | Malformed JSON content.\n* DEB-U-1001 | No content provided in the body of the request.\n\nPossible error codes for Create are:\n* DEB-C-0002 | A mandatory field is missing.\n* DEB-C-0004 | The parent location/debtor does not exist.\n* DEB-C-0005 | A referenced entity could not be found.\n* DEB-C-0006 | At least one field has exceeded the allowed character length.\n* DEB-C-0007 | The referenced type exists but is invalid for a debtor.\n* DEB-C-0112 | The id of the external timezone is unknown.\n* DEB-C-1000 | Malformed JSON content.\n* DEB-C-1001 | No content provided in the body of the request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "DEB-U-0006",
                    "message": "The property 'name' cannot have more than 33 characters."
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* DEB-U-0000 | You have insufficient permissions to update the debtor.\n* DEB-C-0000 | You have insufficient permissions to create the debtor.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "DEB-U-0000",
                    "message": "You either have insufficient permissions to update the debtor or updating is disabled in general."
                  }
                ]
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteDebtor",
        "tags": [
          "Debtors"
        ],
        "summary": "Delete a debtor.",
        "description": "Delete a single debtor. The deletion of a debtor is governed by the same restrictions as that of a location object.\n",
        "responses": {
          "204": {
            "description": "The debtor has been deleted successfully."
          },
          "400": {
            "description": "Bad Request. Possible error codes are:\n* DEB-D-0001 | The debtor cannot be deleted, due to other objects that use the debtor.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "DEB-D-0001",
                    "message": "The debtor is already referenced by the project P302-11."
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* DEB-D-0000 | You have insufficient permissions to delete the debtor.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "DEB-D-0000",
                    "message": "You either have insufficient permissions to delete the debtor or deleting is disabled in general."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/debtors/searches": {
      "post": {
        "operationId": "searchDebtors",
        "tags": [
          "Debtors"
        ],
        "summary": "Search debtors.",
        "description": "Execute a dynamic search for debtors.",
        "requestBody": {
          "required": true,
          "description": "A list of range entries to specify the search criterias.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RangeEntry"
                }
              },
              "example": [
                {
                  "mode": "I",
                  "operation": "Eq",
                  "fieldname": "address.street",
                  "low": "%Weg 15",
                  "high": null
                },
                {
                  "mode": "E",
                  "operation": "Gt",
                  "fieldname": "type",
                  "low": 2,
                  "high": null
                }
              ]
            }
          }
        },
        "responses": {
          "201": {
            "description": "The search has been executed successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceReferences"
                },
                "example": {
                  "itemCount": 3,
                  "items": [
                    {
                      "url": "/api/debtors/17",
                      "isValid": true
                    },
                    {
                      "url": "/api/debtors/18",
                      "isValid": true
                    },
                    {
                      "url": "/api/debtors/231",
                      "isValid": false
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Possible error codes are:\n* DES-C-0001 | The referenced field does not exist in the entities you are searching for.\n* DES-C-0002 | Invalid operation.\n* DES-C-0003 | Invalid mode.\n* DES-C-0004 | Value in *low* is not valid (wrong data type).\n* DES-C-0005 | Value in *high* is not valid (wrong data type).\n* DES-C-1000 | Malformed JSON content.\n* DES-C-1001 | No content provided in the body of the request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "DES-C-0003",
                    "message": "Invalid mode."
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* DES-C-0000 | You have insufficient permissions to search for debtors.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "DES-C-0000",
                    "message": "You have insufficient permissions to search for debtors."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/debtorToLocationConversions": {
      "post": {
        "operationId": "convertDebtorToLocation",
        "tags": [
          "Debtors"
        ],
        "summary": "Convert a debtor into a location.",
        "description": "In some cases you may need to convert a debtor into a location, which can be done by posting the desired location  object in the request body to this endpoint. The property *id* has to be a reference to the debtor you want to convert  into a location. You will also need to change the property *type* of the location in comparison to the old debtor  object, because address types are restricted to either locations or debtors.\n",
        "requestBody": {
          "required": true,
          "description": "The desired location resource for the conversion. The *id* field has to be a reference to the id of the debtor  you want to convert into a location.\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Location"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The debtor has been successfully converted into a location.",
            "headers": {
              "Location": {
                "description": "Link to the location resource.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Possible error codes are:\n* DTL-C-0001 | The referenced debtor does not exist.\n* DTL-C-0002 | A mandatory field is missing.\n* DTL-C-0005 | A referenced entity could not be found.\n* DTL-C-0006 | At least one field has exceeded the allowed character length.\n* DTL-C-0007 | The referenced type exists but is invalid for a location.\n* DTL-C-0022 | The referenced entity is not a debtor (it may be a location already).\n* DTL-C-1000 | Malformed JSON content.\n* DTL-C-1001 | No content provided in the body of the request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "DTL-C-0006",
                    "message": "The property 'matchCode' cannot have more than 33 characters."
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* DTL-C-0000 | You have insufficient permissions to convert the debtor into a location.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "DTL-C-0000",
                    "message": "You have insufficient permissions to convert the debtor into a location."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/documents": {
      "get": {
        "operationId": "getAllDocuments",
        "tags": [
          "Documents"
        ],
        "summary": "Get all documents.",
        "description": "Retrieve links to all documents at once.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uri"
                  }
                },
                "example": [
                  "api/documents/1",
                  "api/documents/2",
                  "api/documents/5"
                ]
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createDocument",
        "tags": [
          "Documents"
        ],
        "summary": "Create a new document.",
        "description": "Submit a new document resource to Innosoft. Omit fields marked as readOnly. The response will contain the generated values.",
        "requestBody": {
          "required": true,
          "description": "The document resource that will be added to Innosoft.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Document"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The document has been created successfully.",
            "headers": {
              "Location": {
                "description": "Link to the created resource.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Possible error codes are:\n* DOC-C-0002 | A mandatory field is missing.\n* DOC-C-0003 | A document with the given id already exists.\n* DOC-C-0006 | At least one field has exceeded the allowed character length.\n* DOC-C-0008 | Invalid value (malformed fileName, checksumHex, contentType, fileLocation.FileUrl or contentByteLength <= 0).\n* DOC-C-1000 | Malformed JSON content.\n* DOC-C-1001 | No content provided in the body of the request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "DOC-C-0006",
                    "message": "The property 'title' cannot have more than 255 characters."
                  }
                ]
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Known error codes are:\n* DOC-C-0001 | The number range is exceeded.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "DOC-C-0001",
                    "message": "The number range is exceeded."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/documents/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/documentId"
        }
      ],
      "get": {
        "operationId": "getDocument",
        "tags": [
          "Documents"
        ],
        "summary": "Get document by id.",
        "description": "Retrieve the data of a single document by its id.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Possible if a general error has occurred or if the document could be found in the database  but has invalid data. This is possible if the data was written by another system which has less validation rules.  Please check the protocol file of the server for more information.\n"
          }
        }
      },
      "put": {
        "operationId": "putDocument",
        "tags": [
          "Documents"
        ],
        "summary": "Create or update a document.",
        "description": "Update a document resource if it already exists. Otherwise it will be created.",
        "requestBody": {
          "required": true,
          "description": "The document resource. If the property *id* is sent in the request it will be ignored because the id in the URL is leading.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Document"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The document has been updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          },
          "201": {
            "description": "The document has been created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.\nPossible error codes for Update are:\n* DOC-U-0006 | At least one field has exceeded the allowed character length.\n* DOC-U-1000 | Malformed JSON content.\n* DOC-U-1001 | No content provided in the body of the request.             \n\nPossible error codes for Create are:\n* DOC-C-0006 | At least one field has exceeded the allowed character length.\n* DOC-C-1000 | Malformed JSON content.\n* DOC-C-1001 | No content provided in the body of the request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "DOC-U-0006",
                    "message": "The property 'title' cannot have more than 255 characters."
                  }
                ]
              }
            }
          },
          "409": {
            "description": "Conflict. Possible error codes are:\n* DOC-U-0321 | Invariant property overridden (fileName, fileLocation.*, content-type are invariant;  allowed values are null and the value of the property of the existing object).\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "DOC-U-0321",
                    "message": "Can't update property \"fileName\"."
                  }
                ]
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteDocument",
        "tags": [
          "Documents"
        ],
        "summary": "Delete a document.",
        "description": "Delete a single document.",
        "responses": {
          "204": {
            "description": "The document has been deleted successfully."
          },
          "400": {
            "description": "Bad Request. Possible error codes are:\n* DOC-D-0001 | The document is currently attached to other resources.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "DOC-D-0001",
                    "message": "The document is already attached to the machine M-322AQ."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/documents/{id}/attachments": {
      "parameters": [
        {
          "$ref": "#/components/parameters/documentId"
        }
      ],
      "get": {
        "operationId": "getAllAttachmentsForDocument",
        "tags": [
          "Documents\\Attachments"
        ],
        "summary": "Get all attachments of a specific document.",
        "description": "Retrieve routes to resources to which the underlying document is attached to.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uri"
                  }
                },
                "example": [
                  "api/projects/1",
                  "api/machines/2",
                  "api/machines/5"
                ]
              }
            }
          },
          "404": {
            "description": "Not Found. Possible error codes are:\n* ATT-R-0005 | A referenced entity could not be found.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "ATT-R-0005",
                    "message": "The document \"49\" does not exist."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/documents/{id}/attachments/attach": {
      "parameters": [
        {
          "$ref": "#/components/parameters/documentId"
        }
      ],
      "put": {
        "operationId": "addAttachmentsForDocument",
        "tags": [
          "Documents\\Attachments"
        ],
        "summary": "Attach a document to other resources.",
        "description": "You can attach a document to the following resources:\n* /api/debtors/{id}\n* /api/locations/{id}\n* /api/resources/{resourceId}/assignments/absent/{id}\n* /api/addresses/{addressId}/assignments/{id}\n* /api/resources/{resourceId}/assignments/internal/{id}\n* /api/projects/{projectId}/assignments/{id}\n* /api/projects/{id}\n* /api/machines/{id}\n* /api/tickets/{id}\n",
        "requestBody": {
          "required": true,
          "description": "A list of resource routes which should be inserted into the current set. Existing links don't need to be mentioned again.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uri"
                }
              },
              "example": [
                "api/projects/42",
                "api/machines/2",
                "api/machines/7"
              ]
            }
          }
        },
        "responses": {
          "200": {
            "description": "The attachments have been added successfully. (Returns the complete list of attachments)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uri"
                  }
                },
                "example": [
                  "api/projects/1",
                  "api/projects/42",
                  "api/machines/2",
                  "api/machines/5",
                  "api/machines/7"
                ]
              }
            }
          },
          "400": {
            "description": "Bad Request. Possible error codes are:\n* ATT-U-0300 | At least one specified attachment is not a valid route.\n* ATT-U-1000 | Malformed JSON content.\n* ATT-U-1001 | No content provided in the body of the request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "ATT-U-0300",
                    "message": "At least one specified attachment is not a valid route."
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not Found. Possible error codes are:\n* ATT-U-0005 | A referenced entity could not be found.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "ATT-U-0005",
                    "message": "The document \"49\" does not exist."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/documents/{id}/attachments/detach": {
      "parameters": [
        {
          "$ref": "#/components/parameters/documentId"
        }
      ],
      "put": {
        "operationId": "removeAttachmentsForDocument",
        "tags": [
          "Documents\\Attachments"
        ],
        "summary": "Remove relations to other resources.",
        "description": "Remove links to other resources for a specific document. (See /attach for possible resources)",
        "requestBody": {
          "required": true,
          "description": "A list of resource routes which should be removed from the current set.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uri"
                }
              },
              "example": [
                "api/projects/1",
                "api/machines/2",
                "api/machines/7"
              ]
            }
          }
        },
        "responses": {
          "200": {
            "description": "The attachments have been removed successfully. (Returns the complete list of attachments)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uri"
                  }
                },
                "example": [
                  "api/machines/5"
                ]
              }
            }
          },
          "400": {
            "description": "Bad Request. Possible error codes are:\n* ATT-D-0300 | At least one specified attachment is not a valid route.\n* ATT-D-1000 | Malformed JSON content.\n* ATT-D-1001 | No content provided in the body of the request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "ATT-D-0300",
                    "message": "At least one specified attachment is not a valid route."
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not Found. Possible error codes are:\n* ATT-D-0005 | A referenced entity could not be found.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "ATT-D-0005",
                    "message": "The document \"49\" does not exist."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/documents/fileTransfer/requestFileUrl": {
      "post": {
        "operationId": "requestFileUrl",
        "tags": [
          "Documents"
        ],
        "summary": "Prepare a document.",
        "description": "The file transfer resource offers a method to generate an *unpublished* document which *fileUrl* refers a non existent \nfile resource. The local file must be uploaded to the generated *fileUrl*. This method is used as a kind of preprocessing \nstep before creating documents that refer a local file that hasn't got a *fileUrl* yet. The client creation scenario can \nbe roughly divided into following steps:    \n1. document = /api/documents/fileTransfer/requestFileUrl\n2. upload local file to document.FileUrl (POST document.FileUrl)\n3. create document (POST /api/documents/)\n",
        "requestBody": {
          "required": true,
          "description": "Document resource without *fileLocation* (will be generated).",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Document"
              },
              "example": {
                "fileName": "invoice.pdf",
                "title": "Invoice 01.01.18",
                "contentType": "application/pdf"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK. Obtain the generated *fileLocation*.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                },
                "example": {
                  "fileName": "invoice.pdf",
                  "fileLocation": {
                    "fileUrl": "<FileUrl>",
                    "locationId": 67
                  },
                  "title": "Invoice 01.01.18",
                  "contentType": "application/pdf"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Possible error codes are:\n* DOC-C-0002 | A mandatory field is missing.\n* DOC-C-0003 | Duplicate key (if id is set).\n* DOC-C-0006 | At least one field has exceeded the allowed character length.\n* DOC-C-0008 | Invalid value (malformed fileName, checksumHex, contentType, fileLocation.FileUrl or contentByteLength <= 0).\n* DOC-C-1000 | Malformed JSON content.\n* DOC-C-1001 | No content provided in the body of the request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "DOC-C-0002",
                    "message": "No value for mandatory property fileName."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/invoicableServiceReports": {
      "get": {
        "operationId": "getAllInvoicableServiceReports",
        "tags": [
          "Invoicable Service Reports"
        ],
        "summary": "List all invoicable service reports.",
        "description": "Retrieve an object with a collection of resource references to all service reports, that are ready for invoicing.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceReferences"
                },
                "example": {
                  "itemCount": 3,
                  "items": [
                    {
                      "url": "/api/invoicableServiceReports/1",
                      "isValid": true
                    },
                    {
                      "url": "/api/invoicableServiceReports/2",
                      "isValid": true
                    },
                    {
                      "url": "/api/invoicableServiceReports/5",
                      "isValid": false
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/invoicableServiceReports/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/serviceReportId"
        }
      ],
      "get": {
        "operationId": "getInvoicableSericeReport",
        "tags": [
          "Invoicable Service Reports"
        ],
        "summary": "Get invoicable service report by id.",
        "description": "Retrieve the data of a single invoicable service report by its id.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoicableServiceReport"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* SER-R-0000 | You have insufficient permissions to read invoicable service reports in general or you do not have the permission to access the master main group of the resource referenced by the service report.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "SER-R-0000",
                    "message": "You either have insufficient permissions to read the service report or reading is disabled in general."
                  }
                ]
              }
            }
          },
          "410": {
            "description": "Gone. Possible error codes are:\n* SER-R-0020 | The service report is already invoiced.\n* SER-R-0021 | The service report is not available for invoicing (LBKOPF.FREIGABE is not set to 1).\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "SER-R-0020",
                    "message": "The service report is already invoiced."
                  }
                ]
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Possible if a general error has occurred or if the invoicable service report could be found  in the database but has invalid data. This is possible if the data was written by another system which has less  validation rules. Please check the protocol file of the server for more information.\n"
          }
        }
      }
    },
    "/invoicableServiceReports/{id}/invoicingApproval": {
      "parameters": [
        {
          "$ref": "#/components/parameters/serviceReportId"
        }
      ],
      "put": {
        "operationId": "markServiceReportAsInvoiced",
        "tags": [
          "Invoicable Service Reports"
        ],
        "summary": "Mark a service report as invoiced.",
        "description": "You can use this endpoint to approve that you have successfully invoiced a service report. This will set the internal status for the invoicing of the service report to 1 which means that it is invoiced.  This report will no longer be listed if you *GET /api/invoicableServiceReports* and return an error if you request  the report itself with *GET /api/invoicableServiceReports/{id}*. Multiple successful PUT requests to this endpoint  do not change the status further.\n",
        "responses": {
          "204": {
            "description": "The service report has been marked as invoiced."
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* SER-U-0000 | You have insufficient permissions to modify invoicable service reports in general or you do not have the permission to access the master main group of the resource referenced by the service report.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "SER-U-0000",
                    "message": "You either have insufficient permissions to update the service report or updating is disabled in general."
                  }
                ]
              }
            }
          },
          "410": {
            "description": "Gone. Possible error codes are:\n* SER-U-0021 | The service report is not available for invoicing.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "SER-U-0021",
                    "message": "The service report is not available for invoicing."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/invoicableServiceReports/{id}/processingError": {
      "parameters": [
        {
          "$ref": "#/components/parameters/serviceReportId"
        }
      ],
      "put": {
        "operationId": "reportProcessingErrorForServiceReport",
        "tags": [
          "Invoicable Service Reports"
        ],
        "summary": "Mark a service report as invalid for invoicing.",
        "description": "You can use this endpoint to report a processing error if the service report contained any invalid data. This will set an internal status to 0 which means that it is not available for invoicing anymore. This  report will no longer be listed if you *GET /api/invoicableServiceReports* and return an error if you request  the report itself with *GET /api/invoicableServiceReports/{id}*. Multiple successful PUT requests to this  endpoint do not change the status further.\n",
        "responses": {
          "204": {
            "description": "The service report has been marked as invalid for invoicing."
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* SER-U-0000 | You have insufficient permissions to modify invoicable service reports in general or you do not have the permission to access the master main group of the resource referenced by the service report.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "SER-U-0000",
                    "message": "You either have insufficient permissions to update the service report or updating is disabled in general."
                  }
                ]
              }
            }
          },
          "410": {
            "description": "Gone. Possible error codes are:\n* SER-U-0020 | The service report is already invoiced.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "SER-U-0020",
                    "message": "TThe service report is already invoiced."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/locations": {
      "post": {
        "operationId": "createLocation",
        "tags": [
          "Locations"
        ],
        "summary": "Create a new location.",
        "description": "Submit a new location to Innosoft. Omit fields marked as readOnly. The response will contain the generated values.",
        "requestBody": {
          "required": true,
          "description": "The location resource that will be added to Innosoft.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Location"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The location has been created successfully.",
            "headers": {
              "Location": {
                "description": "Link to the created resource.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Possible error codes are:        \n* LOC-C-0002 | A mandatory field is missing.\n* LOC-C-0003 | The committed id is already used by another object.\n* LOC-C-0004 | The parent location does not exist.\n* LOC-C-0005 | A referenced entity could not be found.\n* LOC-C-0006 | At least one field has exceeded the allowed character length.\n* LOC-C-0007 | The referenced type exists but is invalid for a location.\n* LOC-C-1000 | Malformed JSON content.\n* LOC-C-1001 | No content provided in the body of the request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "LOC-C-0006",
                    "message": "The property 'name' cannot have more than 33 characters."
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* LOC-C-0000 | You have insufficient permissions to create the location.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "LOC-C-0000",
                    "message": "You either have insufficient permissions to create the location or creating is disabled in general."
                  }
                ]
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Known error codes are:\n* LOC-C-0001 | The number range is exceeded.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "LOC-C-0001",
                    "message": "The number range is exceeded."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/locations/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "Unique identifier of a location.",
          "schema": {
            "type": "string",
            "maxLength": 20
          }
        }
      ],
      "get": {
        "operationId": "getLocation",
        "tags": [
          "Locations"
        ],
        "summary": "Get location by id.",
        "description": "Retrieve the data of a single location by its id.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* LOC-R-0000 | You have insufficient permissions to read the location.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "LOC-R-0000",
                    "message": "You either have insufficient permissions to read the location or reading is disabled in general."
                  }
                ]
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Possible if a general error has occurred or if the location could be found in the database  but has invalid data. This is possible if the data was written by another system which has less validation rules.  Please check the protocol file of the server for more information.\n"
          }
        }
      },
      "put": {
        "operationId": "putLocation",
        "tags": [
          "Locations"
        ],
        "summary": "Create or update a location.",
        "description": "Update a location resource if it already exists. Otherwise it will be created.",
        "requestBody": {
          "required": true,
          "description": "The location resource. If the property *id* is sent in the request it will be ignored because the id in the URL is leading.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Location"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The location has been updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              }
            }
          },
          "201": {
            "description": "The location has been created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.\nPossible error codes for Update are:\n* LOC-U-0002 | A mandatory field is missing.\n* LOC-U-0004 | The parent location does not exist.\n* LOC-U-0005 | A referenced entity could not be found.\n* LOC-U-0006 | At least one field has exceeded the allowed character length.\n* LOC-U-0007 | The referenced type exists but is invalid for a location.\n* LOC-U-1000 | Malformed JSON content.\n* LOC-U-1001 | No content provided in the body of the request.\n\nPossible error codes for Create are:\n* LOC-C-0002 | A mandatory field is missing.\n* LOC-C-0004 | The parent location does not exist.\n* LOC-C-0005 | A referenced entity could not be found.\n* LOC-C-0006 | At least one field has exceeded the allowed character length.\n* LOC-C-0007 | The referenced type exists but is invalid for a location.\n* LOC-C-1000 | Malformed JSON content.\n* LOC-C-1001 | No content provided in the body of the request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "LOC-U-0006",
                    "message": "The property 'name' cannot have more than 33 characters."
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* LOC-U-0000 | You have insufficient permissions to update the location.\n* LOC-C-0000 | You have insufficient permissions to create the location.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "LOC-U-0000",
                    "message": "You either have insufficient permissions to update the location or updating is disabled in general."
                  }
                ]
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteLocation",
        "tags": [
          "Locations"
        ],
        "summary": "Delete a location.",
        "description": "Delete a single location. Only possible if the following restrictions are satisfied:\n* The 17th digit of the OPTIONEN field in the OPTION_E table is set to 1.\n* The FELDINHALT table contains the entry “GRUPPE=9 and ZAEHLER=309 and LANGIDX=0 and BESCHREIBUNG=1”.\n* No other entity (in this order: location/debtor, machine, project, assignment, ticket, offer, invoice) references the targeted location.\n",
        "responses": {
          "204": {
            "description": "The location has been deleted successfully."
          },
          "400": {
            "description": "Bad Request. Possible error codes are:\n* LOC-D-0001 | The location cannot be deleted, due to other objects that use the location.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "LOC-D-0001",
                    "message": "The location is already referenced by the machine M302-11."
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* LOC-D-0000 | You have insufficient permissions to delete the location.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "LOC-D-0000",
                    "message": "You either have insufficient permissions to delete the location or deleting is disabled in general."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/locations/searches": {
      "post": {
        "operationId": "searchLocations",
        "tags": [
          "Locations"
        ],
        "summary": "Search locations.",
        "description": "Execute a dynamic search for locations.",
        "requestBody": {
          "required": true,
          "description": "A list of range entries to specify the search criterias.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RangeEntry"
                }
              },
              "example": [
                {
                  "mode": "I",
                  "operation": "Eq",
                  "fieldname": "address.street",
                  "low": "%Weg 15",
                  "high": null
                },
                {
                  "mode": "E",
                  "operation": "Gt",
                  "fieldname": "type",
                  "low": 2,
                  "high": null
                }
              ]
            }
          }
        },
        "responses": {
          "201": {
            "description": "The search has been executed successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceReferences"
                },
                "example": {
                  "itemCount": 3,
                  "items": [
                    {
                      "url": "/api/locations/15",
                      "isValid": true
                    },
                    {
                      "url": "/api/locations/16",
                      "isValid": true
                    },
                    {
                      "url": "/api/locations/230",
                      "isValid": false
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Possible error codes are:\n* LOS-C-0001 | The referenced field does not exist in the entities you are searching for.\n* LOS-C-0002 | Invalid operation.\n* LOS-C-0003 | Invalid mode.\n* LOS-C-0004 | Value in *low* is not valid (wrong data type).\n* LOS-C-0005 | Value in *high* is not valid (wrong data type).\n* LOS-C-1000 | Malformed JSON content.\n* LOS-C-1001 | No content provided in the body of the request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "LOS-C-0003",
                    "message": "Invalid mode."
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* LOS-C-0000 | You have insufficient permissions to search for locations.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "LOS-C-0000",
                    "message": "You have insufficient permissions to search for locations."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/locationToDebtorConversions": {
      "post": {
        "operationId": "convertLocationToDebtor",
        "tags": [
          "Locations"
        ],
        "summary": "Convert a location into a debtor.",
        "description": "In some cases you may need to convert a location into a debtor, which can be done by posting the desired debtor  object in the request body. The property *id* has to be a reference to the location you want to convert into a debtor.  You will also need to change the property *type* of the debtor in comparison to the old location object, because  address types are restricted to either locations or debtors.\n",
        "requestBody": {
          "required": true,
          "description": "The desired debtor resource for the conversion. The *id* field has to be a reference to the id of the location  you want to convert into a debtor.\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Debtor"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The location has been successfully converted into a debtor.",
            "headers": {
              "Location": {
                "description": "Link to the debtor resource.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Debtor"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Possible error codes are:\n* LTD-C-0001 | The referenced location does not exist.\n* LTD-C-0002 | A mandatory field is missing.\n* LTD-C-0005 | A referenced entity could not be found.\n* LTD-C-0006 | At least one field has exceeded the allowed character length.\n* LTD-C-0007 | The referenced type exists but is invalid for a debtor.\n* LTD-C-1000 | Malformed JSON content.\n* LTD-C-1001 | No content provided in the body of the request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "LTD-C-0006",
                    "message": "The property 'matchCode' cannot have more than 33 characters."
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* LTD-C-0000 | You have insufficient permissions to convert the location into a debtor.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "LTD-C-0000",
                    "message": "You have insufficient permissions to convert the location into a debtor."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/machines": {
      "post": {
        "operationId": "createMachine",
        "tags": [
          "Machines"
        ],
        "summary": "Create a new machine.",
        "description": "Submit a new machine to Innosoft. Omit fields marked as readOnly. The response will contain the generated values.",
        "requestBody": {
          "required": true,
          "description": "The machine resource that will be added to Innosoft.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Machine"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The machine has been created successfully.",
            "headers": {
              "Location": {
                "description": "Link to the created resource.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Machine"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Possible error codes are:\n* MAS-C-0002 | A mandatory field is missing.\n* MAS-C-0003 | A machine with the given *id* already exists.\n* MAS-C-0005 | A referenced entity could not be found.\n* MAS-C-0006 | At least one field has exceeded the allowed character length.\n* MAS-C-0016 | A DateTime property has invalid values (i.e. month = 0 or minute = 60).\n* MAS-C-0017 | A DateTime property is outside of the allowed range (i.e. year = 1752).\n* MAS-C-1000 | Malformed JSON content.\n* MAS-C-1001 | No content provided in the body of the request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "MAS-C-0006",
                    "message": "The property 'name' cannot have more than 33 characters."
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* MAS-C-0000 | You have insufficient permissions to create machines or you do not have write access to the location.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "MAS-C-0000",
                    "message": "You have insufficient permissions to create machines."
                  }
                ]
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Known error codes are:\n* MAS-C-0001 | The number range is exceeded.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "MAS-C-0001",
                    "message": "The number range is exceeded."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/machines/{machineId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/machineId"
        }
      ],
      "get": {
        "operationId": "getMachine",
        "tags": [
          "Machines"
        ],
        "summary": "Get machine by id.",
        "description": "Retrieve the data of a single machine by its id.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Machine"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* MAS-R-0000 | You have insufficient permissions to read machines or you do not have read access to the location.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "MAS-R-0000",
                    "message": "You have insufficient permissions to read machines."
                  }
                ]
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Possible if a general error has occurred or if the machine could be found in the database but has invalid data.  This is possible if the data was written by another system which has less validation rules. Please check the protocol file of the  server for more information.\n"
          }
        }
      },
      "put": {
        "operationId": "putMachine",
        "tags": [
          "Machines"
        ],
        "summary": "Create or update a machine.",
        "description": "Update a machine resource if it already exists. Otherwise it will be created.",
        "requestBody": {
          "required": true,
          "description": "The machine resource. If the property *id* is sent in the request it will be ignored because the id in the URL is leading in this case.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Machine"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The machine has been updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Machine"
                }
              }
            }
          },
          "201": {
            "description": "The machine has been created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Machine"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.\nPossible error codes for Update are:\n* MAS-U-0002 | A mandatory field is missing.\n* MAS-U-0005 | A referenced entity could not be found.\n* MAS-U-0006 | At least one field has exceeded the allowed character length.\n* MAS-U-0016 | A DateTime property has invalid values (i.e. month = 0 or minute = 60).\n* MAS-U-0017 | A DateTime property is outside of the allowed range (i.e. year = 1752).\n* MAS-U-1000 | Malformed JSON content.\n* MAS-U-1001 | No content provided in the body of the request.            \n\nPossible error codes for Create are:\n* MAS-C-0002 | A mandatory field is missing.\n* MAS-C-0005 | A referenced entity could not be found.\n* MAS-C-0006 | At least one field has exceeded the allowed character length.\n* MAS-C-0016 | A DateTime property has invalid values (i.e. month = 0 or minute = 60).\n* MAS-C-0017 | A DateTime property is outside of the allowed range (i.e. year = 1752).\n* MAS-C-1000 | Malformed JSON content.\n* MAS-C-1001 | No content provided in the body of the request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "MAS-U-0006",
                    "message": "The property 'name' cannot have more than 33 characters."
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* MAS-U-0000 | You have insufficient permissions to update machines or you do not have write access to the location.\n* MAS-C-0000 | You have insufficient permissions to create machines or you do not have write access to the location.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "MAS-U-0000",
                    "message": "You have insufficient permissions to update machines."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/projects": {
      "get": {
        "operationId": "getAllProjects",
        "tags": [
          "Projects"
        ],
        "summary": "List all projects.",
        "description": "Retrieve an object with a collection of resource references to all projects.        \n\nYou can use optional query parameters to filter by a specific time frame. Examples:                \n* /api/projects?since=2015-10-16\n* /api/projects?until=2015-12-31T23:59:59\n* /api/projects?since=2015-10-16&until=2015-10-31\n\n**Note:** Timezones are not supported, so the time should be converted to the local timezone of the database server first.\n",
        "parameters": [
          {
            "name": "since",
            "in": "query",
            "description": "Optional filter \"since\" in the format YYYY-MM-DD[Thh:mm:ss]. Matches the property \"begin\" of a project.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "until",
            "in": "query",
            "description": "Optional filter \"until\" in the format YYYY-MM-DD[Thh:mm:ss]. Matches the property \"end\" of a project.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceReferences"
                },
                "example": {
                  "itemCount": 3,
                  "items": [
                    {
                      "url": "/api/projects/42",
                      "isValid": true
                    },
                    {
                      "url": "/api/projects/43",
                      "isValid": true
                    },
                    {
                      "url": "/api/projects/44",
                      "isValid": false
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Possible error codes are:\n* PRJ-A-0017 | One of the date parameters in the URL is outside of the supported range ('1753-01-01' - '9999-12-31T23:59:59').\n* PRJ-A-1002 | One of the date parameters could not be parsed, because the format is invalid or the date itself does not exist.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "PRJ-A-1002",
                    "message": "\"2015-06-31\" is not a valid date."
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* PRJ-A-0000 | You have insufficient permissions to read projects.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "PRJ-A-0000",
                    "message": "You either have insufficient permissions to read Projects or reading is disabled in general."
                  }
                ]
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createProject",
        "tags": [
          "Projects"
        ],
        "summary": "Create a new project.",
        "description": "Submit a new project to Innosoft. Omit fields marked as readOnly. The response will contain the generated values.",
        "requestBody": {
          "required": true,
          "description": "The project resource that will be added to Innosoft.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Project"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The project has been created successfully.",
            "headers": {
              "Location": {
                "description": "Link to the created resource.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Possible error codes are:\n* PRJ-C-0002 | A mandatory field is missing.\n* PRJ-C-0003 | The committed id is already used by another object.\n* PRJ-C-0005 | A referenced entity could not be found.\n* PRJ-C-0006 | At least one field has exceeded the allowed character length.\n* PRJ-C-0007 | The referenced code exists but has an invalid type for a project.\n* PRJ-C-0008 | The referenced location has no parent debtor in the address hierachy. Please provide debtorId.\n* PRJ-C-0009 | A referenced address exists but is invalid.\n* PRJ-C-0016 | A DateTime property has invalid values (i.e. month = 0 or minute = 60).\n* PRJ-C-0017 | A DateTime property is outside of the allowed range (i.e. year = 1752).\n* PRJ-C-0018 | The provided end is before the begin.\n* PRJ-C-0022 | The entity referenced by debtorId is not a debtor.\n* PRJ-C-1000 | Malformed JSON content.\n* PRJ-C-1001 | No content provided in the body of the request.          \n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "PRJ-C-0006",
                    "message": "The property 'externalId' cannot have more than 20 characters."
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* PRJ-C-0000 | You have insufficient permissions to create the project.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "PRJ-C-0000",
                    "message": "You either have insufficient permissions to create the project or creating is disabled in general."
                  }
                ]
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Known error codes are:\n* PRJ-C-0001 | The number range is exceeded.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "PRJ-C-0001",
                    "message": "The number range is exceeded."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/projects/{projectId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/projectId"
        }
      ],
      "get": {
        "operationId": "getProject",
        "tags": [
          "Projects"
        ],
        "summary": "Get project by id.",
        "description": "Retrieve the data of a single project by its id.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* PRJ-R-0000 | You have insufficient permissions to read the project.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "PRJ-R-0000",
                    "message": "You either have insufficient permissions to read the project or reading is disabled in general."
                  }
                ]
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Possible if a general error has occurred or if the project could be found in the database but has invalid data.  This is possible if the data was written by another system which has less validation rules. Please check the protocol file of the  server for more information.\n"
          }
        }
      },
      "put": {
        "operationId": "putProject",
        "tags": [
          "Projects"
        ],
        "summary": "Create or update a project.",
        "description": "Update a project resource if it already exists. Otherwise it will be created.",
        "requestBody": {
          "required": true,
          "description": "The project resource. If the property **id** is sent in the request it will be ignored because the id in the URL is leading.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Project"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The project has been updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "201": {
            "description": "The project has been created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.\nPossible error codes for Update are:\n* PRJ-U-0002 | A mandatory field is missing.\n* PRJ-U-0005 | A referenced entity could not be found.\n* PRJ-U-0006 | At least one field has exceeded the allowed character length.\n* PRJ-U-0007 | The referenced code exists but has an invalid type for a project.\n* PRJ-U-0008 | The referenced location has no parent debtor in the address hierachy. Please provide debtorId.\n* PRJ-U-0009 | A referenced address exists but is invalid.\n* PRJ-U-0015 | The editing of the project is disabled by the referenced status.\n* PRJ-U-0016 | A DateTime property has invalid values (i.e. month = 0 or minute = 60).\n* PRJ-U-0017 | A DateTime property is outside of the allowed range (i.e. year = 1752).\n* PRJ-U-0018 | The provided end is before the begin.\n* PRJ-U-0022 | The entity referenced by debtorId is not a debtor.\n* PRJ-U-1000 | Malformed JSON content.\n* PRJ-U-1001 | No content provided in the body of the request.\n\nPossible error codes for Create are:\n* PRJ-C-0002 | A mandatory field is missing.\n* PRJ-C-0005 | A referenced entity could not be found.\n* PRJ-C-0006 | At least one field has exceeded the allowed character length.\n* PRJ-C-0007 | The referenced code exists but has an invalid type for a project.\n* PRJ-C-0008 | The referenced location has no parent debtor in the address hierachy. Please provide debtorId.\n* PRJ-C-0009 | A referenced address exists but is invalid.\n* PRJ-C-0016 | A DateTime property has invalid values (i.e. month = 0 or minute = 60).\n* PRJ-C-0017 | A DateTime property is outside of the allowed range (i.e. year = 1752).\n* PRJ-C-0018 | The provided end is before the begin.\n* PRJ-C-0022 | The entity referenced by debtorId is not a debtor.\n* PRJ-C-1000 | Malformed JSON content.\n* PRJ-C-1001 | No content provided in the body of the request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "PRJ-U-0006",
                    "message": "The property 'externalId' cannot have more than 20 characters."
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* PRJ-U-0000 | You have insufficient permissions to update the project.\n* PRJ-C-0000 | You have insufficient permissions to create the project.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "PRJ-U-0000",
                    "message": "You either have insufficient permissions to update the project or updating is disabled in general."
                  }
                ]
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteProject",
        "tags": [
          "Projects"
        ],
        "summary": "Delete a project.",
        "description": "Delete a single project and also the subordinated project machines, project materials and project contact persons.  You will not delete the original resources (i.e. the original contact person) but the references (project contact persons) to the project.\n",
        "responses": {
          "204": {
            "description": "The project has been deleted successfully."
          },
          "400": {
            "description": "Bad Request. Possible error codes are:\n* PRJ-D-0001 | The project is already referenced by another entity (i.e. an assignment).\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "PRJ-D-0001",
                    "message": "The project is already referenced by an assignment."
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* PRJ-D-0000 | You have insufficient permissions to delete the project.          \n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "PRJ-D-0000",
                    "message": "You either have insufficient permissions to delete the project or deleting is disabled in general."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/projects/{projectId}/assignments": {
      "parameters": [
        {
          "$ref": "#/components/parameters/projectId"
        }
      ],
      "get": {
        "operationId": "getAllAssignmentsForProject",
        "tags": [
          "Projects\\Assignments"
        ],
        "summary": "List all assignments of a project.",
        "description": "Retrieve references to all assignments of a specific project.\n\nYou can use optional query parameters to filter by a specific time frame or erpTicketnumber. For Example:\n* /api/projects/42/assignments?since=2015-10-16\n* /api/projects/42/assignments?until=2015-12-31T23:59:59\n* /api/projects/42/assignments?since=2015-10-16&until=2015-10-31\n* /api/projects/42/assignments?erpTicketNumber=A23-5678\n* /api/projects/42/assignments?since=2015-10-16&erpTicketNumber=A23-5678\n\n**Note:** Timezones are not supported, so the time should be converted to the local timezone of the database server first.    \n",
        "parameters": [
          {
            "name": "since",
            "in": "query",
            "description": "Optional filter \"since\" in the format YYYY-MM-DD[Thh:mm:ss]. Matches the property *begin*.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "until",
            "in": "query",
            "description": "Optional filter \"until\" in the format YYYY-MM-DD[Thh:mm:ss]. Matches the property *end*.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "erpTicketNumber",
            "in": "query",
            "description": "Optional filter \"erpTicketNumber\".",
            "schema": {
              "type": "string",
              "maxLength": 33
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceReferences"
                },
                "example": {
                  "count": 3,
                  "items": [
                    {
                      "url": "/api/projects/47/assignments/3",
                      "isValid": true
                    },
                    {
                      "url": "/api/projects/47/assignments/4",
                      "isValid": true
                    },
                    {
                      "url": "/api/projects/47/assignments/5",
                      "isValid": false
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Possible error codes are:\n* PAS-A-0017 | One of the date parameters in the URL is outside of the supported range ('1753-01-01' - '9999-12-31T23:59:59').\n* PAS-A-1002 | One of the date parameters could not be parsed, because the format is invalid or the date itself does not exist.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "PAS-A-1002",
                    "message": "\"2015-06-31\" is not a valid date."
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* PAS-A-0000 | You have insufficient permissions to read project assignments.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "PAS-A-0000",
                    "message": "You have insufficient permissions to read project assignments."
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not Found. Possible error codes are:\n* PAS-A-0005 | A referenced entity could not be found.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "PAS-A-0005",
                    "message": "The project \"49\" does not exist."
                  }
                ]
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createProjectAssignment",
        "tags": [
          "Projects\\Assignments"
        ],
        "summary": "Create a new project assignment.",
        "description": "Submit a new project assignment to Innosoft. Omit fields marked as readOnly. The response will contain the generated values.",
        "requestBody": {
          "required": true,
          "description": "The project assignment resource that will be added to Innosoft. The field *projectId* will be ignored as the path parameter is leading.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectAssignment"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The project assignment has been created successfully.",
            "headers": {
              "Location": {
                "description": "Link to the created resource.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectAssignment"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Possible error codes are:\n* PAS-C-0002 | A mandatory field is missing.\n* PAS-C-0003 | An assignment with the given id already exists.\n* PAS-C-0005 | A referenced entity could not be found.\n* PAS-C-0006 | At least one field has exceeded the allowed character length.\n* PAS-C-0007 | The referenced code exists but is invalid for a project assignment.\n* PAS-C-0009 | The referenced entity is invalid.\n* PAS-C-0010 | The referenced entity is inactive.\n* PAS-C-0013 | The referenced status is less restrictive than the status referenced by the project.\n* PAS-C-0015 | The referenced status of the project disables the editing of assignments.\n* PAS-C-0016 | A DateTime property has invalid values (i.e. month = 0 or minute = 60).\n* PAS-C-0017 | A DateTime property is outside of the allowed range (i.e. year = 1752).\n* PAS-C-0018 | The time frame between begin and end is less than 15 minutes or the DateTime which marks the end of the time frame is before the begin.\n* PAS-C-1000 | Malformed JSON content.\n* PAS-C-1001 | No content provided in the body of the request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "PAS-C-0006",
                    "message": "The property 'remark' cannot have more than 33 characters."
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* PAS-C-0000 | You have insufficient permissions to create project assignments in general or you do not have write access to the group  and main group of the resource. This error code is also possible if you try to set the *statusId* and do not have the right to edit  the status of an assignment.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "PAS-C-0000",
                    "message": "You have insufficient permissions to create project assignments."
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not Found. Possible error codes are:\n* PAS-C-0005 | A referenced entity could not be found.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "PAS-C-0005",
                    "message": "The project \"49\" does not exist."
                  }
                ]
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Known error codes are:\n* PAS-C-0001 | The number range is exceeded.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "PAS-C-0001",
                    "message": "The number range is exceeded."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/projects/{projectId}/assignments/{assignmentId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/projectId"
        },
        {
          "$ref": "#/components/parameters/assignmentId"
        }
      ],
      "get": {
        "operationId": "getProjectAssignment",
        "tags": [
          "Projects\\Assignments"
        ],
        "summary": "Get project assignment by id.",
        "description": "Retrieve the data of a single assignment by its id.",
        "parameters": [
          {
            "name": "toUTC",
            "in": "query",
            "description": "If you want to get the ExtendedDateTime properties of the assignment in UTC you can add this query parameter. For example:\n* /api/projects/47/assignments/3?toUTC=true\n",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectAssignment"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* PAS-R-0000 | You have insufficient permissions to read assignments in general or you do not have the right  to access the group and main group of the assignment or the resource referenced by the assignment.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "PAS-R-0000",
                    "message": "You have insufficient permissions to read assignments."
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not Found. Possible error codes are:\n* PAS-R-0005 | A referenced entity could not be found.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "PAS-R-0005",
                    "message": "The project \"49\" does not exist."
                  }
                ]
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Possible if a general error has occurred or if the assignment could be found in the database  but has invalid data. This is possible if the data was written by another system which has less validation rules.  Please check the protocol file of the server for more information.\n"
          }
        }
      },
      "put": {
        "operationId": "putProjectAssignment",
        "tags": [
          "Projects\\Assignments"
        ],
        "summary": "Create or update a project assignment.",
        "description": "Update a project assignment resource if it already exists. Otherwise it will be created.",
        "requestBody": {
          "required": true,
          "description": "The project assignment resource. The properties *projectId* and *id* will be ignored as the path parameters are leading.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectAssignment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The project assignment has been updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectAssignment"
                }
              }
            }
          },
          "201": {
            "description": "The project assignment has been created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectAssignment"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.\nPossible error codes for Update are:\n* PAS-U-0002 | A mandatory field is missing.\n* PAS-U-0005 | A referenced entity could not be found.\n* PAS-U-0006 | At least one field has exceeded the allowed character length.\n* PAS-U-0007 | The referenced code exists but is invalid for a project assignment.\n* PAS-U-0009 | The referenced entity is invalid.\n* PAS-U-0010 | The referenced entity is inactive.\n* PAS-U-0013 | The referenced status is less restrictive than the status referenced by the project.\n* PAS-U-0015 | The referenced status of the project disables the editing of assignments.\n* PAS-U-0016 | A DateTime property has invalid values (i.e. month = 0 or minute = 60).\n* PAS-U-0017 | A DateTime property is outside of the allowed range (i.e. year = 1752).\n* PAS-U-0018 | The time frame between begin and end is less than 15 minutes or the DateTime which marks the end of the time frame is before the begin.\n* PAS-U-1000 | Malformed JSON content.\n* PAS-U-1001 | No content provided in the body of the request.\n\nPossible error codes for Create are:\n* PAS-C-0002 | A mandatory field is missing.\n* PAS-C-0005 | A referenced entity could not be found.\n* PAS-C-0006 | At least one field has exceeded the allowed character length.\n* PAS-C-0007 | The referenced code exists but is invalid for a project assignment.\n* PAS-C-0009 | The referenced entity is invalid.\n* PAS-C-0010 | The referenced entity is inactive.\n* PAS-C-0013 | The referenced status is less restrictive than the status referenced by the project.\n* PAS-C-0015 | The referenced status of the project disables the editing of assignments.\n* PAS-C-0016 | A DateTime property has invalid values (i.e. month = 0 or minute = 60).\n* PAS-C-0017 | A DateTime property is outside of the allowed range (i.e. year = 1752).\n* PAS-C-0018 | The time frame between begin and end is less than 15 minutes or the DateTime which marks the end of the time frame is before the begin.\n* PAS-C-1000 | Malformed JSON content.\n* PAS-C-1001 | No content provided in the body of the request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "PAS-U-0006",
                    "message": "The property 'remark' cannot have more than 33 characters."
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* PAS-U-0000 | You have insufficient permissions to create project assignments in general or you do not have write access to the group  and main group of the resource. This error code is also possible if you try to set the *statusId* and do not have the right to edit  the status of an assignment.\n* PAS-C-0000 | You have insufficient permissions to create project assignments in general or you do not have write access to the group  and main group of the resource. This error code is also possible if you try to set the *statusId* and do not have the right to edit  the status of an assignment.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "PAS-U-0000",
                    "message": "You have insufficient permissions to update assignments."
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not Found. Possible error codes are:\n* PAS-C-0005 | A referenced entity could not be found.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "PAS-C-0005",
                    "message": "The project \"49\" does not exist."
                  }
                ]
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteProjectAssignment",
        "tags": [
          "Projects\\Assignments"
        ],
        "summary": "Delete a project assignment.",
        "description": "Delete a single project assignment.",
        "responses": {
          "204": {
            "description": "The project assignment has been deleted successfully."
          },
          "400": {
            "description": "Bad Request. Possible error codes are:\n* PAS-D-0001 | The assignment is already referenced by an other entity (i.e. service reports).\n* PAS-D-0015 | The referenced status of the project disables the editing of assignments.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "ABS-D-0001",
                    "message": "The assignment is already referenced by the service report 40293."
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* PAS-D-0000 | You have insufficient permissions to delete assignments in general or you do not have the right to access the group  and main group of the assignment or the resource referenced by the assignment.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "PAS-D-0000",
                    "message": "You have insufficient permissions to delete project assignments."
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not Found. Possible error codes are:\n* PAS-D-0005 | A referenced entity could not be found.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "ABS-D-0005",
                    "message": "The project \"49\" does not exist."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/projects/{projectId}/assignments/{assignmentId}/machines": {
      "parameters": [
        {
          "$ref": "#/components/parameters/projectId"
        },
        {
          "$ref": "#/components/parameters/assignmentId"
        }
      ],
      "get": {
        "operationId": "getAllAssignmentMachines",
        "tags": [
          "Projects\\Assignments\\Machines"
        ],
        "summary": "List all machines of an assignment.",
        "description": "Retrieve an object with references to all machines of an assignment.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceReferences"
                },
                "example": {
                  "itemCount": 2,
                  "items": [
                    {
                      "url": "/api/projects/projectId/assignments/0/machines/machineId0",
                      "isValid": true
                    },
                    {
                      "url": "/api/projects/projectId/assignments/0/machines/machineId1",
                      "isValid": true
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* ASM-A-0000 | You have insufficient permissions to read assignments.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "ASM-A-0000",
                    "message": "You have insufficient permissions to read assignments."
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not Found. Possible error codes are:\n* ASM-A-0005 | The referenced assignment does not exist.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "ASM-A-0005",
                    "message": "The referenced assignment does not exist."
                  }
                ]
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createAssignmentMachine",
        "tags": [
          "Projects\\Assignments\\Machines"
        ],
        "summary": "Create a new assignment machine.",
        "description": "Submit a new assignment machine to Innosoft. Omit fields marked as readOnly. The response will contain the generated values.",
        "requestBody": {
          "required": true,
          "description": "The assignment machine resource that will be added to Innosoft.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignmentMachine"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The assignment machine has been created successfully.",
            "headers": {
              "Location": {
                "description": "Link to the created resource.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignmentMachine"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Possible error codes are:\n* ASM-C-0002 | The mandatory field *machineId* is missing.\n* ASM-C-0003 | The specified assignment machine already exists.\n* ASM-C-0005 | A referenced entity could not be found.\n* ASM-C-0006 | At least one field has exceeded the allowed character length.\n* ASM-C-1000 | Malformed JSON content.\n* ASM-C-1001 | No content provided in the body of the request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "-C-0006",
                    "message": "The mandatory field machineId is missing."
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* ASM-C-0000 | You have insufficient permissions to edit assignments.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "ASM-C-0000",
                    "message": "You have insufficient permissions to edit assignments."
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not Found. Possible error codes are:\n* ASM-C-0005 | The referenced assignment does not exist.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "ASM-C-0005",
                    "message": "The referenced assignment does not exist."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/projects/{projectId}/assignments/{assignmentId}/machines/{machineId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/projectId"
        },
        {
          "$ref": "#/components/parameters/assignmentId"
        },
        {
          "$ref": "#/components/parameters/machineId"
        }
      ],
      "get": {
        "operationId": "getAssignmentMachine",
        "tags": [
          "Projects\\Assignments\\Machines"
        ],
        "summary": "Get assignment machine by id.",
        "description": "Retrieve the data of a single assignment machine by its id.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignmentMachine"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* ASM-R-0000 | You have insufficient permissions to read assignments.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "ASM-R-0000",
                    "message": "You have insufficient permissions to read assignments."
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not Found. Possible error codes are:\n* ASM-R-0005 | A referenced entity could not be found.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "ASM-R-0005",
                    "message": "The referenced assignment machine does not exist."
                  }
                ]
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Possible if a general error has occurred or if the assignment machine could be found in the  database but has invalid data. This is possible if the data was written by another system which has less validation  rules. Please check the protocol file of the server for more information.\n"
          }
        }
      },
      "put": {
        "operationId": "putAssignmentMachine",
        "tags": [
          "Projects\\Assignments\\Machines"
        ],
        "summary": "Create or update an assignment machine.",
        "description": "Update an assignment machine resource if it already exists. Otherwise it will be created. Only the additional data can be updated.\n",
        "requestBody": {
          "required": true,
          "description": "The assignment machine resource.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignmentMachine"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The assignment machine has been updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignmentMachine"
                }
              }
            }
          },
          "201": {
            "description": "The assignment machine has been created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignmentMachine"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.\nPossible error codes for Update are:\n* ASM-U-0006 | At least one field has exceeded the allowed character length.\n* ASM-U-1000 | Malformed JSON content.           \n\nPossible error codes for Create are:\n* ASM-C-0006 | At least one field has exceeded the allowed character length.\n* ASM-C-1000 | Malformed JSON content.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "ASM-U-0006",
                    "message": "The additional property 'someProp' cannot have more than 80 characters."
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* ASM-U-0000 | You have insufficient permissions to edit assignments.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "ASM-U-0000",
                    "message": "You have insufficient permissions to edit assignments."
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not Found. Possible error codes are:\n* ASM-C-0005 | A referenced entity could not be found.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "ASM-C-0005",
                    "message": "The referenced assignment does not exist."
                  }
                ]
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteAssignmentMachine",
        "tags": [
          "Projects\\Assignments\\Machines"
        ],
        "summary": "Delete an assignment machine.",
        "description": "Delete a single assignment machine. Note that only the link to the project will be deleted, not the actual machine.",
        "responses": {
          "204": {
            "description": "The assignment machine has been deleted successfully."
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* ASM-D-0000 | You have insufficient permissions to edit assignments.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "ASM-D-0000",
                    "message": "You have insufficient permissions to edit assignments."
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not Found. Possible error codes are:\n* ASM-D-0005 | A referenced entity could not be found.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "ASM-C-0005",
                    "message": "The referenced assignment machine does not exist."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/projects/{projectId}/contactPersons": {
      "parameters": [
        {
          "$ref": "#/components/parameters/projectId"
        }
      ],
      "get": {
        "operationId": "getAllProjectContactPersons",
        "tags": [
          "Projects\\Contact persons"
        ],
        "summary": "List all contact persons for a project.",
        "description": "Retrieve links to all project contact persons at once. Please be aware, that the response will only  contain the URLs of the project contact persons and not the data of each project contact person.\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uri"
                  }
                },
                "example": [
                  "api/projects/47/contactPersons/1",
                  "api/projects/47/contactPersons/2",
                  "api/projects/47/contactPersons/5"
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* PCP-A-0000 | You have insufficient permissions to read project contact persons.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "PCP-A-0000",
                    "message": "You either have insufficient permissions to read project contact persons or reading is disabled in general."
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not found. Possible error codes are:\n* PCP-A-0005 | The referenced project does not exist.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "PCP-A-0005",
                    "message": "A project with the id '48' does not exist."
                  }
                ]
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createProjectContactPerson",
        "tags": [
          "Projects\\Contact persons"
        ],
        "summary": "Create a new project contact person.",
        "description": "Submit a new project contact person to innosoft. The *id* field must reference an existing contact person.",
        "requestBody": {
          "required": true,
          "description": "The project contact person resource that will be added to Innosoft.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectContactPerson"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The project contact person has been created successfully.",
            "headers": {
              "Location": {
                "description": "Link to the created resource.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectContactPerson"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Possible error codes are:\n* PCP-C-0002 | A mandatory field is missing.\n* PCP-C-0005 | A referenced entity could not be found.\n* PCP-C-0006 | At least one field has exceeded the allowed character length.\n* PCP-C-0010 | The referenced contact person is inactive.\n* PCP-C-0013 | The referenced contact person does not belong to one of the project's addresses.\n* PCP-C-0015 | The referenced status of the project disables the editing of the project and subordinated resources.\n* PCP-C-1000 | Malformed JSON content.\n* PCP-C-1001 | No content provided in the body of the request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "PCP-C-0006",
                    "message": "The property 'type' cannot have more than 50 characters."
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* PCP-C-0000 | You have insufficient permissions to create the project contact person.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "PCP-C-0000",
                    "message": "You either have insufficient permissions to create the project contact person or creating is disabled in general."
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not found. Possible error codes are:\n* PCP-C-0005 | The referenced project does not exist.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "PCP-C-0005",
                    "message": "A project with the id '48' does not exist."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/projects/{projectId}/contactPersons/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/projectId"
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "Unique identifier of a contact person.",
          "schema": {
            "type": "integer"
          }
        }
      ],
      "get": {
        "operationId": "getProjectContactPerson",
        "tags": [
          "Projects\\Contact persons"
        ],
        "summary": "Get project contact person by id.",
        "description": "Retrieve the data of a single project contact person by its id.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectContactPerson"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* PCP-R-0000 | You have insufficient permissions to read the project contact person.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "PCP-R-0000",
                    "message": "You either have insufficient permissions to read the project contact person or reading is disabled in general."
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not found. Possible error codes are:\n* PCP-R-0005 | The referenced project does not exist.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "PCP-R-0005",
                    "message": "A project with the id '48' does not exist."
                  }
                ]
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Possible if a general error has occurred or if the project contact person could be found in  the database but has invalid data. This is possible if the data was written by another system which has less validation rules. Please check the protocol file of the server for more information.\n"
          }
        }
      },
      "put": {
        "operationId": "putProjectContactPerson",
        "tags": [
          "Projects\\Contact persons"
        ],
        "summary": "Create or update a project contact person.",
        "description": "Update a project contact person resource if it already exists. Otherwise it will be created.",
        "requestBody": {
          "required": true,
          "description": "The project contact person resource. If the properties *id* or *projectId* are sent in the request  they will be ignored because the ids in the URL are leading.\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectContactPerson"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The project contact person has been updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectContactPerson"
                }
              }
            }
          },
          "201": {
            "description": "The project contact person has been created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectContactPerson"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.\nPossible error codes for Update are:\n* PCP-U-0006 | At least one field has exceeded the allowed character length.\n* PCP-U-0010 | The referenced contact person is inactive.\n* PCP-U-0015 | The referenced status of the project disables the editing of the project and subordinated resources.\n* PCP-U-1000 | Malformed JSON content.\n* PCP-U-1001 | No content provided in the body of the request.            \n\nPossible error codes for Create are:\n* PCP-C-0006 | At least one field has exceeded the allowed character length.\n* PCP-C-0010 | The referenced contact person is inactive.\n* PCP-C-0013 | The referenced contact person does not belong to one of the project's addresses.\n* PCP-C-0015 | The referenced status of the project disables the editing of the project and subordinated resources.\n* PCP-C-1000 | Malformed JSON content.\n* PCP-C-1001 | No content provided in the body of the request.          \n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "PCP-U-0006",
                    "message": "The property 'type' cannot have more than 50 characters."
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* PCP-U-0000 | You have insufficient permissions to update the project contact person.\n* PCP-C-0000 | You have insufficient permissions to create the project contact person.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "PCP-U-0000",
                    "message": "You either have insufficient permissions to update the project contact person or updating is disabled in general."
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not found. Possible error codes are:\n* PCP-U-0005 | A referenced entity could not be found.\n* PCP-C-0005 | A referenced entity could not be found.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "PCP-U-0005",
                    "message": "A project with the id '48' does not exist."
                  }
                ]
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteProjectContactPerson",
        "tags": [
          "Projects\\Contact persons"
        ],
        "summary": "Delete a project contact person.",
        "description": "Delete a single project contact person. Only the relation to project will be deleted. Not the actual contact person.",
        "responses": {
          "204": {
            "description": "The project contact person has been deleted successfully."
          },
          "400": {
            "description": "Forbidden. Possible error codes are:\n* PCP-D-0015 | The referenced status of the project disables the editing of the project and subordinated resources.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "PCP-D-0015",
                    "message": "Editing is disabled for this project."
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* PCP-D-0000 | You have insufficient permissions to delete the project contact person.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "PCP-D-0000",
                    "message": "You either have insufficient permissions to delete the project contact person or deleting is disabled in general."
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not found. Possible error codes are:\n* PCP-D-0005 | A referenced entity could not be found.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "PCP-D-0005",
                    "message": "A project with the id '48' does not exist."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/projects/{projectId}/machines": {
      "parameters": [
        {
          "$ref": "#/components/parameters/projectId"
        }
      ],
      "get": {
        "operationId": "getAllProjectMachines",
        "tags": [
          "Projects\\Machines"
        ],
        "summary": "List all machines for a project.",
        "description": "Retrieve links to all project machines for the given project. Please be aware, that the response  will only contain the URLs of the project machines and not the data of each project machine.\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uri"
                  }
                },
                "example": [
                  "api/projects/47/machines/1",
                  "api/projects/47/machines/2",
                  "api/projects/47/machines/5"
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* PJM-A-0000 | You have insufficient permissions to read project machines.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "PJM-A-0000",
                    "message": "You either have insufficient permissions to read project machines or reading is disabled in general."
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not found. Possible error codes are:\n* PJM-A-0005 | The referenced project does not exist.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "PJM-A-0005",
                    "message": "A project with the id '48' does not exist."
                  }
                ]
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createProjectMachine",
        "tags": [
          "Projects\\Machines"
        ],
        "summary": "Create a new project machine.",
        "description": "Assign an existing machine to a project by sending its *id* in the request. All other fields can be set  to `null` because the service can copy them from the original machine which is referenced by the *id*.\n",
        "parameters": [
          {
            "name": "importMachineTree",
            "in": "query",
            "description": "This optional parameter signals the service to import not only the specified machine from the Innosoft  table *MAPARK* but the whole machine tree which includes all parent and child machines of the given  machine and also the parent and children of each node in the tree structure.\n\n`/api/projects/{projectId}/machines?importMachineTree=true`\n",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "The project machine resource that will be added to Innosoft.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectMachine"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The project machine has been created successfully.",
            "headers": {
              "Location": {
                "description": "Link to the created resource.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectMachine"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Possible error codes are:\n* PJM-C-0002 | A mandatory field is missing.\n* PJM-C-0005 | A referenced entity could not be found.\n* PJM-C-0006 | At least one field has exceeded the allowed character length.\n* PJM-C-0010 | The referenced machine is inactive.\n* PJM-C-0013 | The referenced machine does not belong to one of the project's addresses.\n* PJM-C-0014 | The machine tree structure contains a cyclic reference.\n* PJM-C-0015 | The referenced status of the project disables the editing of the project and subordinated resources.\n* PJM-C-1000 | Malformed JSON content.\n* PJM-C-1001 | No content provided in the body of the request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "PJM-C-0006",
                    "message": "The property 'name' cannot have more than 33 characters."
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* PJM-C-0000 | You have insufficient permissions to create the project machine.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "PJM-C-0000",
                    "message": "You either have insufficient permissions to create the project machine or creating is disabled in general."
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not found. Possible error codes are:\n* PJM-C-0005 | The referenced project does not exist.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "PJM-C-0005",
                    "message": "A project with the id '48' does not exist."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/projects/{projectId}/machines/{machineId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/projectId"
        },
        {
          "$ref": "#/components/parameters/machineId"
        }
      ],
      "get": {
        "operationId": "getProjectMachine",
        "tags": [
          "Projects\\Machines"
        ],
        "summary": "Get project machine by id.",
        "description": "Retrieve the data of a single project machine by its id.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectMachine"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* PJM-R-0000 | You have insufficient permissions to read the project machine.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "PJM-R-0000",
                    "message": "You either have insufficient permissions to read the project machine or reading is disabled in general."
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not found. Possible error codes are:\n* PJM-R-0005 | The referenced project does not exist.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "PJM-R-0005",
                    "message": "A project with the id '48' does not exist."
                  }
                ]
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Possible if a general error has occurred or if the project machine could be found in  the database but has invalid data. This is possible if the data was written by another system which has less  validation rules. Please check the protocol file of the server for more information.\n"
          }
        }
      },
      "put": {
        "operationId": "putProjectMachine",
        "tags": [
          "Projects\\Machines"
        ],
        "summary": "Create or update a project machine.",
        "description": "Update a project machine resource if it already exists. Otherwise it will be created.",
        "requestBody": {
          "required": true,
          "description": "The project machine resource. If the properties *id* or *projectId* are sent in the request  they will be ignored because the ids in the URL are leading in this case.\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectMachine"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The project machine has been updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectMachine"
                }
              }
            }
          },
          "201": {
            "description": "The project machine has been created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectMachine"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.\nPossible error codes for Update are:\n* PJM-U-0005 | A referenced entity could not be found.\n* PJM-U-0006 | At least one field has exceeded the allowed character length.\n* PJM-U-0015 | The referenced status of the project disables the editing of the project and subordinated resources.\n* PJM-U-1000 | Malformed JSON content.\n* PJM-U-1001 | No content provided in the body of the request.             \n\nPossible error codes for Create are:\n* PJM-C-0005 | A referenced entity could not be found.\n* PJM-C-0006 | At least one field has exceeded the allowed character length.\n* PJM-C-0010 | The referenced machine is inactive.\n* PJM-C-0013 | The referenced machine does not belong to one of the project's addresses.\n* PJM-C-0014 | The machine tree structure contains a cyclic reference.\n* PJM-C-0015 | The referenced status of the project disables the editing of the project and subordinated resources.\n* PJM-C-1000 | Malformed JSON content.\n* PJM-C-1001 | No content provided in the body of the request.          \n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "PJM-U-0006",
                    "message": "The property 'name' cannot have more than 33 characters."
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* PJM-U-0000 | You have insufficient permissions to update the project machine.\n* PJM-C-0000 | You have insufficient permissions to create the project machine.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "PJM-U-0000",
                    "message": "You either have insufficient permissions to update the project machine or updating is disabled in general."
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not found. Possible error codes are:\n* PJM-U-0005 | The referenced project does not exist.\n* PJM-C-0005 | The referenced project does not exist.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "PJM-U-0005",
                    "message": "A project with the id '48' does not exist."
                  }
                ]
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteProjectMachine",
        "tags": [
          "Projects\\Machines"
        ],
        "summary": "Delete a project machine.",
        "description": "Delete a single project machine. Only the relation to the project will be deleted. Not the actual machine.",
        "parameters": [
          {
            "name": "deleteMachineTree",
            "in": "query",
            "description": "This optional parameter can be used to delete the whole project machine tree coming with this machine. This includes parent machines and their children\n\n`/api/projects/{projectId}/machines/{id}?deleteMachineTree=true`        \n",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The project machine has been deleted successfully."
          },
          "400": {
            "description": "Bad Request. Possible error codes are:\n* PJM-D-0014 | The machine tree structure contains a cyclic reference.\n* PJM-D-0015 | The referenced status of the project disables the editing of the project and subordinated resources.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "PJM-D-0014",
                    "message": "The machine tree structure contains a cyclic reference."
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* PJM-D-0000 | You have insufficient permissions to delete the project machine.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "PJM-D-0000",
                    "message": "You either have insufficient permissions to delete the project machine or deleting is disabled in general."
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not found. Possible error codes are:\n* PJM-D-0005 | The referenced project does not exist.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "PJM-D-0005",
                    "message": "A project with the id '48' does not exist."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/projects/{projectId}/materials": {
      "parameters": [
        {
          "$ref": "#/components/parameters/projectId"
        }
      ],
      "get": {
        "operationId": "getAllProjectMaterials",
        "tags": [
          "Projects\\Materials"
        ],
        "summary": "List all materials for a project.",
        "description": "Retrieve links to all project materials at once. Please be aware, that the response will  only contain the URLs of the project materials and not the data of each project material.\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uri"
                  }
                },
                "example": [
                  "api/projects/47/materials/1",
                  "api/projects/47/materials/2",
                  "api/projects/47/materials/5"
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* PMT-A-0000 | You have insufficient permissions to read project materials.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "PMT-A-0000",
                    "message": "You either have insufficient permissions to read project materials or reading is disabled in general."
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not found. Possible error codes are:\n* PMT-A-0005 | The referenced project does not exist.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "PMT-A-0005",
                    "message": "A project with the id '48' does not exist."
                  }
                ]
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createProjectMaterial",
        "tags": [
          "Projects\\Materials"
        ],
        "summary": "Create a new project material.",
        "description": "Assign an existing material to a project by sending the corresponding *materialId* or *materialNumber*  in the request. The field *projectId* will be ignored in the request as the path parameter is leading.\n",
        "requestBody": {
          "required": true,
          "description": "The project material resource that will be added to Innosoft.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectMaterial"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The project material has been created successfully.",
            "headers": {
              "Location": {
                "description": "Link to the created resource.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectMaterial"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Possible error codes are:\n* PMT-C-0002 | A mandatory field is missing.\n* PMT-C-0005 | A referenced entity could not be found.\n* PMT-C-0006 | At least one field has exceeded the allowed character length.\n* PMT-C-0010 | The referenced material is inactive.\n* PMT-C-0011 | There are multiple materials for the provided *materialNumber*. Please provide *materialId*.\n* PMT-C-0012 | The *materialNumber* does not match the *materialNumber* of the original material referenced\nby *materialId*. Please provide only *materialNumber* or *materialId* or ensure that both match the properties\nof the original material.\n* PMT-C-0015 | The referenced status of the project disables the editing of the project and subordinated resources.\n* PMT-C-1000 | Malformed JSON content.\n* PMT-C-1001 | No content provided in the body of the request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "PMT-C-0006",
                    "message": "The property 'materialNumber' cannot have more than 30 characters."
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* PMT-C-0000 | You have insufficient permissions to create the project material.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "PMT-C-0000",
                    "message": "You either have insufficient permissions to create the project material or creating is disabled in general."
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not found. Possible error codes are:\n* PMT-C-0005 | The referenced project does not exist.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "PMT-C-0005",
                    "message": "A project with the id '48' does not exist."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/projects/{projectId}/materials/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/projectId"
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "Unique identifier of a project material.",
          "schema": {
            "type": "integer"
          }
        }
      ],
      "get": {
        "operationId": "getProjectMaterial",
        "tags": [
          "Projects\\Materials"
        ],
        "summary": "Get project material by id.",
        "description": "Retrieve the data of a single project material by its id.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectMaterial"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* PMT-R-0000 | You have insufficient permissions to read the project material.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "PMT-R-0000",
                    "message": "You either have insufficient permissions to read the project material or reading is disabled in general."
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not found. Possible error codes are:\n* PMT-R-0005 | The referenced project does not exist.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "PMT-R-0005",
                    "message": "A project with the id '48' does not exist."
                  }
                ]
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Possible if a general error has occurred or if the project material could be found in  the database but has invalid data. This is possible if the data was written by another system which has less  validation rules. Please check the protocol file of the server for more information.\n"
          }
        }
      },
      "put": {
        "operationId": "putProjectMaterial",
        "tags": [
          "Projects\\Materials"
        ],
        "summary": "Create or update a project material.",
        "description": "Update a project material resource if it already exists. Otherwise it will be created.",
        "requestBody": {
          "required": true,
          "description": "The project material resource. If the properties *id* or *projectId* are sent in the request  they will be ignored because the ids in the URL are leading in this case. The properties *materialId*  and *materialNumber* will be ignored if the project material already exists because you can not change  the reference to the original material after the creation.\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectMaterial"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The project material has been updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectMaterial"
                }
              }
            }
          },
          "201": {
            "description": "The project material has been created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectMaterial"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.\nPossible error codes for Update are:\n* PMT-U-0002 | A mandatory field is missing.\n* PMT-U-0005 | A referenced entity could not be found.\n* PMT-U-0006 | At least one field has exceeded the allowed character length.\n* PMT-U-0015 | The referenced status of the project disables the editing of the project and subordinated resources.\n* PMT-U-1000 | Malformed JSON content.\n* PMT-U-1001 | No content provided in the body of the request.             \n\nPossible error codes for Create are:\n* PMT-C-0002 | A mandatory field is missing.\n* PMT-C-0005 | A referenced entity could not be found.\n* PMT-C-0006 | At least one field has exceeded the allowed character length.\n* PMT-C-0010 | The referenced material is inactive.\n* PMT-C-0011 | There are multiple materials for the provided *materialNumber*. Please provide *materialId*.\n* PMT-C-0012 | The *materialNumber* does not match the *materialNumber* of the original material referenced\nby *materialId*. Please provide only *materialNumber* or *materialId* or ensure that both match the properties\nof the original material.\n* PMT-C-0015 | The referenced status of the project disables the editing of the project and subordinated resources.\n* PMT-C-1000 | Malformed JSON content.\n* PMT-C-1001 | No content provided in the body of the request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "PMT-U-0006",
                    "message": "The property 'name' cannot have more than 170 characters."
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* PMT-U-0000 | You have insufficient permissions to update the project material.\n* PMT-C-0000 | You have insufficient permissions to create the project material.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "PMT-U-0000",
                    "message": "You either have insufficient permissions to update the project material or updating is disabled in general."
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not found. Possible error codes are:\n* PMT-U-0005 | The referenced project does not exist.\n* PMT-C-0005 | The referenced project does not exist.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "PMT-U-0005",
                    "message": "A project with the id '48' does not exist."
                  }
                ]
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteProjectMaterial",
        "tags": [
          "Projects\\Materials"
        ],
        "summary": "Delete a project material.",
        "description": "Delete a single project material. Only the relation to the project will be deleted. Not the actual material.",
        "responses": {
          "204": {
            "description": "The project material has been deleted successfully."
          },
          "400": {
            "description": "Bad Request. Possible error codes are:\n* PMT-D-0015 | The referenced status of the project disables the editing of the project and subordinated resources.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "PMT-D-0015",
                    "message": "Editing is disabled for this project."
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* PMT-D-0000 | You have insufficient permissions to delete the project material.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "PMT-D-0000",
                    "message": "You either have insufficient permissions to delete the project material or deleting is disabled in general."
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not found. Possible error codes are:\n* PMT-D-0005 | The referenced project does not exist.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "PMT-D-0005",
                    "message": "A project with the id '48' does not exist."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/projectassignments/erpticketduplicates": {
      "get": {
        "operationId": "getAssignmentsWithDuplicateErpTicket",
        "tags": [
          "Projects\\Assignments"
        ],
        "summary": "Get assignments with duplicate erpTicket.",
        "description": "Retrieve all assignments, where the combination of *erpTicketNumber* and *erpOrderNumber* is not unique. You will only see assignments you have read access rights to, so you might get results which contain less than two assignments with the  same combination of *erpTicketNumber* and *erpOrderNumber* because some assignments from other main groups or groups might be excluded  in the result. The result only contains assignments where both *erpTicketNumber* and *erpOrderNumber* are not *null*. In contrast to other collection resources this resource does not contain links but the assignments themselves. In addition the assignments  might be invalid, because the validation is skipped to be able to use this resource for its primary purpose: to recognize assignments which  were copied in the Innosoft Resource Planning and are therefore unknown by a leading ERP system which imported the original assignments with  the ticket number as id.\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectAssignment"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* PAS-A-0000 | You have insufficient permissions to read assignments.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "PAS-A-0000",
                    "message": "You have insufficient permissions to read assignments."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/resources/{resourceId}/assignments/absent": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        }
      ],
      "get": {
        "operationId": "getAllAbsentAssignmentsForResource",
        "tags": [
          "Resources\\Absent assignments"
        ],
        "summary": "List all absent assignments for a resource.",
        "description": "Retrieve references to all absent assignments of a specific resource.\n\nYou can use optional query parameters to filter by a specific time frame. Examples:\n* /api/resources/42/assignments/absent?since=2015-10-16\n* /api/resources/42/assignments/absent?until=2015-12-31T23:59:59\n* /api/resources/42/assignments/absent?since=2015-10-16&until=2015-10-31\n\n**Note:** Timezones are not supported, so the time should be converted to the local timezone of the database server first.    \n",
        "parameters": [
          {
            "name": "since",
            "in": "query",
            "description": "Optional filter \"since\" in the format YYYY-MM-DD[Thh:mm:ss]. Matches the property *begin*.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "until",
            "in": "query",
            "description": "Optional filter \"until\" in the format YYYY-MM-DD[Thh:mm:ss]. Matches the property *end*.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceReferences"
                },
                "example": {
                  "count": 3,
                  "items": [
                    {
                      "url": "/api/resources/47/assignments/absent/3",
                      "isValid": true
                    },
                    {
                      "url": "/api/resources/47/assignments/absent/4",
                      "isValid": true
                    },
                    {
                      "url": "/api/resources/47/assignments/absent/5",
                      "isValid": false
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Possible error codes are:\n* ABS-A-0017 | One of the date parameters in the URL is outside of the supported range ('1753-01-01' - '9999-12-31T23:59:59').\n* ABS-A-1002 | One of the date parameters could not be parsed, because the format is invalid or the date itself does not exist.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "ABS-A-1002",
                    "message": "\"2015-06-31\" is not a valid date."
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* ABS-A-0000 | You have insufficient permissions to read absent assignments.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "ABS-A-0000",
                    "message": "You have insufficient permissions to read absent assignments."
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not Found. Possible error codes are:\n* ABS-A-0005 | A referenced entity could not be found.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "ABS-A-0005",
                    "message": "The resource \"49\" does not exist."
                  }
                ]
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createAbsentAssignment",
        "tags": [
          "Resources\\Absent assignments"
        ],
        "summary": "Create a new absent assignment.",
        "description": "Submit a new absent assignment to Innosoft. Omit fields marked as readOnly. The response will contain the generated values.",
        "requestBody": {
          "required": true,
          "description": "The absent assignment resource that will be added to Innosoft. The *resourceId* field will be ignored as the path parameter is leading.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AbsentAssignment"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The absent assignment has been created successfully.",
            "headers": {
              "Location": {
                "description": "Link to the created resource.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AbsentAssignment"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Possible error codes are:\n* ABS-C-0002 | A mandatory field is missing.\n* ABS-C-0003 | An assignment with the given id already exists.\n* ABS-C-0005 | A referenced entity could not be found.\n* ABS-C-0006 | At least one field has exceeded the allowed character length.\n* ABS-C-0007 | The referenced code exists but is invalid for an absent assignment.\n* ABS-C-0009 | The referenced entity is invalid.\n* ABS-C-0010 | The referenced entity is inactive.\n* ABS-C-0015 | The status of the resource is inactive.\n* ABS-C-0016 | A DateTime property has invalid values (i.e. month = 0 or minute = 60).\n* ABS-C-0017 | A DateTime property is outside of the allowed range (i.e. year = 1752).\n* ABS-C-0018 | The time frame between begin and end is less than 15 minutes or the DateTime which marks the end of the time frame is before the begin.\n* ABS-C-1000 | Malformed JSON content.\n* ABS-C-1001 | No content provided in the body of the request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "ABS-C-0006",
                    "message": "The property 'remark' cannot have more than 33 characters."
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* ABS-C-0000 | You have insufficient permissions to create absent assignments in general or you do not have write access to the group and main group of the resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "ABS-C-0000",
                    "message": "You have insufficient permissions to create absent assignments."
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not Found. Possible error codes are:\n* ABS-C-0005 | A referenced entity could not be found.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "ABS-C-0005",
                    "message": "The resource \"49\" does not exist."
                  }
                ]
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Known error codes are:\n* ABS-C-0001 | The number range is exceeded.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "ABS-C-0001",
                    "message": "The number range is exceeded."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/resources/{resourceId}/assignments/absent/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "Unique identifier of an absent assignment.",
          "schema": {
            "type": "integer"
          }
        }
      ],
      "get": {
        "operationId": "getAbsentAssignment",
        "tags": [
          "Resources\\Absent assignments"
        ],
        "summary": "Get absent assignment by id.",
        "description": "Retrieve the data of a single assignment by its id.",
        "parameters": [
          {
            "name": "toUTC",
            "in": "query",
            "description": "If you want to get the ExtendedDateTime properties of the assignment in UTC you can add this query parameter. For example:\n* /api/resources/47/assignments/absent/15?toUTC=true\n",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AbsentAssignment"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* ABS-R-0000 | You have insufficient permissions to read absent assignments in general or you do not have the right to access the group and main group of the resource referenced by the assignment.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "ABS-R-0000",
                    "message": "You have insufficient permissions to read absent assignments."
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not Found. Possible error codes are:\n* ABS-R-0005 | A referenced entity could not be found.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "ABS-R-0005",
                    "message": "The resource \"49\" does not exist."
                  }
                ]
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Possible if a general error has occurred or if the assignment could be found in the database  but has invalid data. This is possible if the data was written by another system which has less validation rules.  Please check the protocol file of the server for more information.\n"
          }
        }
      },
      "put": {
        "operationId": "putAbsentAssignment",
        "tags": [
          "Resources\\Absent assignments"
        ],
        "summary": "Create or update an absent assignment.",
        "description": "Update an absent assignment resource if it already exists. Otherwise it will be created.",
        "requestBody": {
          "required": true,
          "description": "The absent assignment resource. The *resourceId* and *id* fields will be ignored as the path parameters are leading.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AbsentAssignment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The absent assignment has been updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AbsentAssignment"
                }
              }
            }
          },
          "201": {
            "description": "The absent assignment has been created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AbsentAssignment"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.\nPossible error codes for Update are:\n* ABS-U-0002 | A mandatory field is missing.\n* ABS-U-0005 | A referenced entity could not be found.\n* ABS-U-0006 | At least one field has exceeded the allowed character length.\n* ABS-U-0007 | The referenced code exists but is invalid for an absent assignment.\n* ABS-U-0009 | The referenced entity is invalid.\n* ABS-U-0010 | The referenced entity is inactive.\n* ABC-U-0015 | The status of the resource is inactive.\n* ABS-U-0016 | A DateTime property has invalid values (i.e. month = 0 or minute = 60).\n* ABS-U-0017 | A DateTime property is outside of the allowed range (i.e. year = 1752).\n* ABS-U-0018 | The time frame between *begin* and *end* is less than 15 minutes or the DateTime which marks the end of the time frame is before the begin.\n* ABS-U-1000 | Malformed JSON content.\n* ABS-U-1001 | No content provided in the body of the request.\n\nPossible error codes for Create are:\n* ABS-C-0002 | A mandatory field is missing.\n* ABS-C-0005 | A referenced entity could not be found.\n* ABS-C-0006 | At least one field has exceeded the allowed character length.\n* ABS-C-0007 | The referenced code exists but is invalid for an absent assignment.\n* ABS-C-0009 | The referenced entity is invalid.\n* ABS-C-0010 | The referenced entity is inactive.\n* ABC-C-0015 | The status of the resource is inactive.\n* ABS-C-0016 | A DateTime property has invalid values (i.e. month = 0 or minute = 60).\n* ABS-C-0017 | A DateTime property is outside of the allowed range (i.e. year = 1752).\n* ABS-C-0018 | The time frame between *begin* and *end* is less than 15 minutes or the DateTime which marks the end of the time frame is before the begin.\n* ABS-C-1000 | Malformed JSON content.\n* ABS-C-1001 | No content provided in the body of the request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "ABS-U-0006",
                    "message": "The property 'remark' cannot have more than 33 characters."
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* ABS-U-0000 | You have insufficient permissions to update absent assignments in general or you do not have write access to the group and main group of the resource.\n* ABS-C-0000 | You have insufficient permissions to create absent assignments in general or you do not have write access to the group and main group of the resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "ABS-U-0000",
                    "message": "You have insufficient permissions to update absent assignments."
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not Found. Possible error codes are:\n* ABS-C-0005 | A referenced entity could not be found.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "ABS-C-0005",
                    "message": "The resource \"49\" does not exist."
                  }
                ]
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteAbsentAssignment",
        "tags": [
          "Resources\\Absent assignments"
        ],
        "summary": "Delete an absent assignment.",
        "description": "Delete a single absent assignment.",
        "responses": {
          "204": {
            "description": "The absent assignment has been deleted successfully."
          },
          "400": {
            "description": "Bad Request. Possible error codes are:\n* ABS-D-0001 | The assignment is already referenced by an other entity (i.e. service reports).\n* ABS-D-0015 | The status of the resource is inactive.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "ABS-D-0001",
                    "message": "The status of the resource is inactive."
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* ABS-D-0000 | You have insufficient permissions to delete absent assignments in general or you do not have the right to access the group and main group the resource referenced by the assignment.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "ABS-D-0000",
                    "message": "You have insufficient permissions to delete absent assignments."
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not Found. Possible error codes are:\n* ABS-D-0005 | A referenced entity could not be found.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "ABS-D-0005",
                    "message": "The resource \"49\" does not exist."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/resources/{resourceId}/assignments/internal": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        }
      ],
      "get": {
        "operationId": "getAllInternalAssignmentsForResource",
        "tags": [
          "Resources\\Internal assignments"
        ],
        "summary": "List all internal assignments for a resource.",
        "description": "Retrieve references to all internal assignments of a specific resource.\n\nYou can use optional query parameters to filter by a specific time frame. Examples:\n* /api/resources/42/assignments/internal?since=2015-10-16\n* /api/resources/42/assignments/internal?until=2015-12-31T23:59:59\n* /api/resources/42/assignments/internal?since=2015-10-16&until=2015-10-31\n\n**Note:** Timezones are not supported, so the time should be converted to the local timezone of the database server first.    \n",
        "parameters": [
          {
            "name": "since",
            "in": "query",
            "description": "Optional filter \"since\" in the format YYYY-MM-DD[Thh:mm:ss]. Matches the property *begin*.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "until",
            "in": "query",
            "description": "Optional filter \"until\" in the format YYYY-MM-DD[Thh:mm:ss]. Matches the property *end*.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceReferences"
                },
                "example": {
                  "count": 3,
                  "items": [
                    {
                      "url": "/api/resources/47/assignments/internal/3",
                      "isValid": true
                    },
                    {
                      "url": "/api/resources/47/assignments/internal/4",
                      "isValid": true
                    },
                    {
                      "url": "/api/resources/47/assignments/internal/5",
                      "isValid": false
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Possible error codes are:\n* INA-A-0017 | One of the date parameters in the URL is outside of the supported range ('1753-01-01' - '9999-12-31T23:59:59').\n* INA-A-1002 | One of the date parameters could not be parsed, because the format is invalid or the date itself does not exist.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "INA-A-1002",
                    "message": "\"2015-06-31\" is not a valid date."
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* INA-A-0000 | You have insufficient permissions to read internal assignments.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "INA-A-0000",
                    "message": "You have insufficient permissions to read internal assignments."
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not Found. Possible error codes are:\n* INA-A-0005 | A referenced entity could not be found.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "INA-A-0005",
                    "message": "The resource \"49\" does not exist."
                  }
                ]
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createInternalAssignment",
        "tags": [
          "Resources\\Internal assignments"
        ],
        "summary": "Create a new internal assignment.",
        "description": "Submit a new internal assignment to Innosoft. Omit fields marked as readOnly. The response will contain the generated values.",
        "requestBody": {
          "required": true,
          "description": "The internal assignment resource that will be added to Innosoft. The *resourceId* field will be ignored as the path parameter is leading.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InternalAssignment"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The internal assignment has been created successfully.",
            "headers": {
              "Location": {
                "description": "Link to the created resource.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalAssignment"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Possible error codes are:\n* INA-C-0002 | A mandatory field is missing.\n* INA-C-0003 | An assignment with the given id already exists.\n* INA-C-0005 | A referenced entity could not be found.\n* INA-C-0006 | At least one field has exceeded the allowed character length.\n* INA-C-0007 | The referenced code exists but is invalid for an internal assignment.\n* INA-C-0009 | The referenced entity is invalid.\n* INA-C-0010 | The referenced entity is inactive.\n* INA-C-0015 | The status of the resource is inactive.\n* INA-C-0016 | A DateTime property has invalid values (i.e. month = 0 or minute = 60).\n* INA-C-0017 | A DateTime property is outside of the allowed range (i.e. year = 1752).\n* INA-C-0018 | The time frame between begin and end is less than 15 minutes or the DateTime which marks the end of the time frame is before the begin.\n* INA-C-1000 | Malformed JSON content.\n* INA-C-1001 | No content provided in the body of the request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "INA-C-0006",
                    "message": "The property 'remark' cannot have more than 33 characters."
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* INA-C-0000 | You have insufficient permissions to create internal assignments in general or you do not have write access to the group and main group of the resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "INA-C-0000",
                    "message": "You have insufficient permissions to create internal assignments."
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not Found. Possible error codes are:\n* INA-C-0005 | A referenced entity could not be found.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "INA-C-0005",
                    "message": "The resource \"49\" does not exist."
                  }
                ]
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Known error codes are:\n* INA-C-0001 | The number range is exceeded.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "INA-C-0001",
                    "message": "The number range is exceeded."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/resources/{resourceId}/assignments/internal/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "Unique identifier of an internal assignment.",
          "schema": {
            "type": "integer"
          }
        }
      ],
      "get": {
        "operationId": "getInternalAssignment",
        "tags": [
          "Resources\\Internal assignments"
        ],
        "summary": "Get internal assignment by id.",
        "description": "Retrieve the data of a single assignment by its id.",
        "parameters": [
          {
            "name": "toUTC",
            "in": "query",
            "description": "If you want to get the ExtendedDateTime properties of the assignment in UTC you can add this query parameter. For example:\n* /api/resources/47/assignments/internal/15?toUTC=true\n",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalAssignment"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* INA-R-0000 | You have insufficient permissions to read internal assignments in general or you do not have the right to access the group and main group of the resource referenced by the assignment.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "INA-R-0000",
                    "message": "You have insufficient permissions to read internal assignments."
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not Found. Possible error codes are:\n* INA-R-0005 | A referenced entity could not be found.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "INA-R-0005",
                    "message": "The resource \"49\" does not exist."
                  }
                ]
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Possible if a general error has occurred or if the assignment could be found in the database  but has invalid data. This is possible if the data was written by another system which has less validation rules.  Please check the protocol file of the server for more information.\n"
          }
        }
      },
      "put": {
        "operationId": "putInternalAssignment",
        "tags": [
          "Resources\\Internal assignments"
        ],
        "summary": "Create or update an internal assignment.",
        "description": "Update an internal assignment resource if it already exists. Otherwise it will be created.",
        "requestBody": {
          "required": true,
          "description": "The internal assignment resource. The *resourceId* and *id* fields will be ignored as the path parameters are leading.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InternalAssignment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The internal assignment has been updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalAssignment"
                }
              }
            }
          },
          "201": {
            "description": "The internal assignment has been created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalAssignment"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.\nPossible error codes for Update are:\n* INA-U-0002 | A mandatory field is missing.\n* INA-U-0005 | A referenced entity could not be found.\n* INA-U-0006 | At least one field has exceeded the allowed character length.\n* INA-U-0007 | The referenced code exists but is invalid for an internal assignment.\n* INA-U-0009 | The referenced entity is invalid.\n* INA-U-0010 | The referenced entity is inactive.\n* ABC-U-0015 | The status of the resource is inactive.\n* INA-U-0016 | A DateTime property has invalid values (i.e. month = 0 or minute = 60).\n* INA-U-0017 | A DateTime property is outside of the allowed range (i.e. year = 1752).\n* INA-U-0018 | The time frame between *begin* and *end* is less than 15 minutes or the DateTime which marks the end of the time frame is before the begin.\n* INA-U-1000 | Malformed JSON content.\n* INA-U-1001 | No content provided in the body of the request.\n\nPossible error codes for Create are:\n* INA-C-0002 | A mandatory field is missing.\n* INA-C-0005 | A referenced entity could not be found.\n* INA-C-0006 | At least one field has exceeded the allowed character length.\n* INA-C-0007 | The referenced code exists but is invalid for an internal assignment.\n* INA-C-0009 | The referenced entity is invalid.\n* INA-C-0010 | The referenced entity is inactive.\n* ABC-C-0015 | The status of the resource is inactive.\n* INA-C-0016 | A DateTime property has invalid values (i.e. month = 0 or minute = 60).\n* INA-C-0017 | A DateTime property is outside of the allowed range (i.e. year = 1752).\n* INA-C-0018 | The time frame between *begin* and *end* is less than 15 minutes or the DateTime which marks the end of the time frame is before the begin.\n* INA-C-1000 | Malformed JSON content.\n* INA-C-1001 | No content provided in the body of the request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "INA-U-0006",
                    "message": "The property 'remark' cannot have more than 33 characters."
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* INA-U-0000 | You have insufficient permissions to update internal assignments in general or you do not have write access to the group and main group of the resource.\n* INA-C-0000 | You have insufficient permissions to create internal assignments in general or you do not have write access to the group and main group of the resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "INA-U-0000",
                    "message": "You have insufficient permissions to update internal assignments."
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not Found. Possible error codes are:\n* INA-C-0005 | A referenced entity could not be found.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "INA-C-0005",
                    "message": "The resource \"49\" does not exist."
                  }
                ]
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteInternalAssignment",
        "tags": [
          "Resources\\Internal assignments"
        ],
        "summary": "Delete an internal assignment.",
        "description": "Delete a single internal assignment.",
        "responses": {
          "204": {
            "description": "The internal assignment has been deleted successfully."
          },
          "400": {
            "description": "Bad Request. Possible error codes are:\n* INA-D-0001 | The assignment is already referenced by an other entity (i.e. service reports).\n* INA-D-0015 | The status of the resource is inactive.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "INA-D-0001",
                    "message": "The status of the resource is inactive."
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* INA-D-0000 | You have insufficient permissions to delete internal assignments in general or you do not have the right to access the group and main group the resource referenced by the assignment.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "INA-D-0000",
                    "message": "You have insufficient permissions to delete internal assignments."
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not Found. Possible error codes are:\n* INA-D-0005 | A referenced entity could not be found.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "INA-D-0005",
                    "message": "The resource \"49\" does not exist."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/spareParts": {
      "get": {
        "operationId": "getSparePartsByPartNumber",
        "tags": [
          "Spare parts"
        ],
        "summary": "Get spare parts by part number.",
        "description": "Retrieve an object with a collection of resource references to all spare parts that have \na certain *partNumber*. For example:\n* /api/spareParts?partNumber=SP317\n",
        "parameters": [
          {
            "name": "partNumber",
            "in": "query",
            "required": true,
            "description": "Required query parameter to only show spare parts with a specific partNumber.",
            "schema": {
              "type": "string",
              "maxLength": 30
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceReferences"
                },
                "example": {
                  "itemCount": 2,
                  "items": [
                    {
                      "url": "/api/spareParts/0",
                      "isValid": true
                    },
                    {
                      "url": "/api/spareParts/1",
                      "isValid": true
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* SPA-R-0000 | You have insufficient permissions to read spare parts.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "SPA-R-0000",
                    "message": "You either have insufficient permissions to read spare parts or reading is disabled in general."
                  }
                ]
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Possible if the partNumber in the URL is not set."
          }
        }
      },
      "post": {
        "operationId": "createSparePart",
        "tags": [
          "Spare parts"
        ],
        "summary": "Create a new spare part.",
        "description": "Submit a new spare part to Innosoft. Omit fields marked as readOnly. The response will contain the generated values.",
        "requestBody": {
          "required": true,
          "description": "The spare part resource that will be added to Innosoft.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SparePart"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The spare part has been created successfully.",
            "headers": {
              "Location": {
                "description": "Link to the created resource.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SparePart"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Possible error codes are:\n* SPA-C-0002 | A mandatory field is missing.\n* SPA-C-0003 | A spare part with the given id already exists.\n* SPA-C-0005 | A referenced entity could not be found.\n* SPA-C-0006 | At least one field has exceeded the allowed character length.\n* SPA-C-0023 | Unknown language code or invalid Innosoft language id provided.\n* SPA-C-0024 | Conflicting values for language code and Innosoft language id provided.\n* SPA-C-1000 | Malformed JSON content.\n* SPA-C-1001 | No content provided in the body of the request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "SPA-C-0006",
                    "message": "The property 'matchCode' cannot have more than 50 characters."
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* SPA-C-0000 | You have insufficient permissions to create spare parts.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "SPA-C-0000",
                    "message": "You either have insufficient permissions to create the spare parts or creating is disabled in general."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/spareParts/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "Unique identifier of a spare part (internal id).",
          "schema": {
            "type": "integer"
          }
        }
      ],
      "get": {
        "operationId": "getSparePart",
        "tags": [
          "Spare parts"
        ],
        "summary": "Get spare part by id.",
        "description": "Retrieve the data of a single spare part by its id.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SparePart"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* SPA-R-0000 | You have insufficient permissions to read the spare part.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "SPA-R-0000",
                    "message": "You either have insufficient permissions to read the spare part or reading is disabled in general."
                  }
                ]
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Possible if a general error has occurred or if the spare part could be found in the database  but has invalid data. This is possible if the data was written by another system which has less validation rules.  Please check the protocol file of the server for more information.\n"
          }
        }
      },
      "put": {
        "operationId": "putSparePart",
        "tags": [
          "Spare parts"
        ],
        "summary": "Create or update a spare part.",
        "description": "Update a spare part resource if it already exists. Otherwise it will be created.",
        "requestBody": {
          "required": true,
          "description": "The spare part resource. If the property *id* is sent in the request it will be ignored  because the id in the URL is leading.\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SparePart"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The spare part has been updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SparePart"
                }
              }
            }
          },
          "201": {
            "description": "The spare part has been created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SparePart"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.\nPossible error codes for Update are:\n* SPA-U-0002 | A mandatory field is missing.\n* SPA-U-0005 | A referenced entity could not be found.\n* SPA-U-0006 | At least one field has exceeded the allowed character length.\n* SPA-U-0023 | Unknown language code or invalid Innosoft language id provided.\n* SPA-U-0024 | Conflicting values for language code and Innosoft language id provided.\n* SPA-U-1000 | Malformed JSON content.\n* SPA-U-1001 | No content provided in the body of the request.             \n\nPossible error codes for Create are:\n* SPA-C-0002 | A mandatory field is missing.\n* SPA-C-0005 | A referenced entity could not be found.\n* SPA-C-0006 | At least one field has exceeded the allowed character length.\n* SPA-C-0023 | Unknown language code or invalid Innosoft language id provided.\n* SPA-C-0024 | Conflicting values for language code and Innosoft language id provided.\n* SPA-C-1000 | Malformed JSON content.\n* SPA-C-1001 | No content provided in the body of the request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "SPA-U-0006",
                    "message": "The property 'matchCode' cannot have more than 50 characters."
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* SPA-U-0000 | You have insufficient permissions to update spare parts.\n* SPA-C-0000 | You have insufficient permissions to create spare parts.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "SPA-U-0000",
                    "message": "You either have insufficient permissions to update the spare part or updating is disabled in general."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/tickets": {
      "get": {
        "operationId": "getAllTickets",
        "tags": [
          "Tickets"
        ],
        "summary": "List all existing tickets.",
        "description": "Retrieve links to all tickets at once. Please be aware, that the response will only contain the URLs of the tickets and not the data of each ticket.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uri"
                  }
                },
                "example": [
                  "api/tickets/1",
                  "api/tickets/2",
                  "api/tickets/3"
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* TIC-A-0000 | You have insufficient permissions to read tickets.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "TIC-A-0000",
                    "message": "You either have insufficient permissions to read Tickets or reading is disabled in general."
                  }
                ]
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createTicket",
        "tags": [
          "Tickets"
        ],
        "summary": "Create a new ticket.",
        "description": "Submit a new ticket to Innosoft. Omit fields marked as readOnly. The response will contain the generated values.",
        "requestBody": {
          "required": true,
          "description": "The ticket resource that will be added to Innosoft.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Ticket"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The ticket has been created successfully.",
            "headers": {
              "Location": {
                "description": "Link to the created resource.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ticket"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Possible error codes are:\n* TIC-C-0002 | A mandatory field is missing.\n* TIC-C-0003 | A ticket with the given ticketId already exists.\n* TIC-C-0005 | A referenced entity could not be found.\n* TIC-C-0006 | At least one field has exceeded the allowed character length.\n* TIC-C-0013 | The fields hotliner and groupId both have values despite being exclusive.\n* TIC-C-0016 | A DateTime property has invalid values (i.e. month = 0 or minute = 60).\n* TIC-C-0017 | A DateTime property is outside of the allowed range (i.e. year = 1752).\n* TIC-C-1000 | Malformed JSON content.\n* TIC-C-1001 | No content provided in the body of the request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "TIC-C-0006",
                    "message": "The property 'hotliner' cannot have more than 12 characters."
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* TIC-C-0000 | You have insufficient permissions to create tickets.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "TIC-C-0000",
                    "message": "You either have insufficient permissions to create the ticket or creating is disabled in general."
                  }
                ]
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Known error codes are:\n* TIC-C-0001 | The number range is exceeded.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "TIC-C-0001",
                    "message": "The number range is exceeded."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/tickets/{ticketId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/ticketId"
        }
      ],
      "get": {
        "operationId": "getTicket",
        "tags": [
          "Tickets"
        ],
        "summary": "Get ticket by id.",
        "description": "Retrieve the data of a single ticket by its id.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ticket"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* TIC-R-0000 | You have insufficient permissions to read tickets.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "TIC-R-0000",
                    "message": "You either have insufficient permissions to read the ticket or reading is disabled in general."
                  }
                ]
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Possible if a general error has occurred or if the ticket could be found in the database  but has invalid data. This is possible if the data was written by another system which has less validation rules.  Please check the protocol file of the server for more information.\n"
          }
        }
      },
      "put": {
        "operationId": "putTicket",
        "tags": [
          "Tickets"
        ],
        "summary": "Create or update a ticket.",
        "description": "Update a ticket resource if it already exists. Otherwise it will be created.",
        "requestBody": {
          "required": true,
          "description": "The ticket resource. If the property *ticketId* is sent in the request it will be ignored because the ticketId in the URL is leading.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Ticket"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ticket has been updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ticket"
                }
              }
            }
          },
          "201": {
            "description": "The ticket has been created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ticket"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.\nPossible error codes for Update are:\n* TIC-U-0002 | A mandatory field is missing.\n* TIC-U-0005 | A referenced entity could not be found.\n* TIC-U-0006 | At least one field has exceeded the allowed character length.\n* TIC-U-0013 | The fields hotliner and groupId both have values despite being exclusive.\n* TIC-U-0016 | A DateTime property has invalid values (i.e. month = 0 or minute = 60).\n* TIC-U-0017 | A DateTime property is outside of the allowed range (i.e. year = 1752).\n* TIC-U-0200 | Ticket is closed. Changes are not allowed.\n* TIC-U-0202 | Can't change hotliner or groupId directly. Use forward instead.\n* TIC-U-1000 | Malformed JSON content.\n* TIC-U-1001 | No content provided in the body of the request.             \n\nPossible error codes for Create are:\n* TIC-C-0002 | A mandatory field is missing.\n* TIC-C-0005 | A referenced entity could not be found.\n* TIC-C-0006 | At least one field has exceeded the allowed character length.\n* TIC-C-0013 | The fields hotliner and groupId both have values despite being exclusive.\n* TIC-C-0016 | A DateTime property has invalid values (i.e. month = 0 or minute = 60).\n* TIC-C-0017 | A DateTime property is outside of the allowed range (i.e. year = 1752).\n* TIC-C-1000 | Malformed JSON content.\n* TIC-C-1001 | No content provided in the body of the request.          \n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "TIC-U-0006",
                    "message": "The property 'title' cannot have more than 80 characters."
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* TIC-U-0000 | You have insufficient permissions to update tickets.\n* TIC-C-0000 | You have insufficient permissions to create tickets.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "TIC-U-0000",
                    "message": "You either have insufficient permissions to update the ticket or updating is disabled in general."
                  }
                ]
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteTicket",
        "tags": [
          "Tickets"
        ],
        "summary": "Delete a ticket.",
        "description": "Delete a single ticket. Corresponding data like the history and ticket texts will be deleted as well.",
        "responses": {
          "204": {
            "description": "The ticket has been deleted successfully."
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* TIC-D-0000 | You have insufficient permissions to delete tickets.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "TIC-D-0000",
                    "message": "You either have insufficient permissions to delete the ticket or deleting is disabled in general."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/tickets/{ticketId}/forward": {
      "parameters": [
        {
          "$ref": "#/components/parameters/ticketId"
        }
      ],
      "post": {
        "operationId": "forwardTicket",
        "tags": [
          "Tickets"
        ],
        "summary": "Forward a ticket.",
        "description": "Forward a ticket to another hotliner or group.",
        "requestBody": {
          "required": true,
          "description": "Forward target that only contains the new hotliner or groupId.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "Forward target",
                "description": "Contains either a hotliner or a group that shall become responsible for the ticket.",
                "properties": {
                  "hotliner": {
                    "description": "Login name of the user who shall become responsible for the ticket (PWUSER.NAME).",
                    "type": "string",
                    "maxLength": 12
                  },
                  "groupId": {
                    "description": "Id of the group that shall become responsible for the ticket (OPTION_G.GRNR).",
                    "type": "integer"
                  }
                },
                "example": {
                  "hotliner": "JSMITH",
                  "groupId": null
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The ticket has been forwarded successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ticket"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Possible error codes are:\n* TIC-C-0002 | A mandatory field is missing.\n* TIC-C-0005 | A referenced entity could not be found.\n* TIC-C-0006 | At least one field has exceeded the allowed character length.\n* TIC-C-0013 | The fields hotliner and groupId both have values despite being exclusive.\n* TIC-C-0200 | Ticket is closed. Changes are not allowed.\n* TIC-C-0203 | Can't forward to the same hotliner or groupId as before.\n* TIC-C-1000 | Malformed JSON content.\n* TIC-C-1001 | No content provided in the body of the request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "TIC-C-0006",
                    "message": "The property 'hotliner' cannot have more than 12 characters."
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* TIC-C-0000 | You have insufficient permissions to forward tickets.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "TIC-C-0000",
                    "message": "You either have insufficient permissions to forward the ticket or forwarding is disabled in general."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/tickets/{ticketId}/close": {
      "parameters": [
        {
          "$ref": "#/components/parameters/ticketId"
        }
      ],
      "put": {
        "operationId": "closeTicket",
        "tags": [
          "Tickets"
        ],
        "summary": "Close a ticket.",
        "description": "Close a ticket which makes it no longer editable.",
        "responses": {
          "200": {
            "description": "The ticket has been closed successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ticket"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* TIC-U-0000 | You have insufficient permissions to close tickets.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "TIC-U-0000",
                    "message": "You either have insufficient permissions to close the ticket or closing is disabled in general."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/tickets/{ticketId}/reopen": {
      "parameters": [
        {
          "$ref": "#/components/parameters/ticketId"
        }
      ],
      "put": {
        "operationId": "reopenTicket",
        "tags": [
          "Tickets"
        ],
        "summary": "Reopen a ticket.",
        "description": "Reopen a closed ticket, which makes it editable again.",
        "responses": {
          "200": {
            "description": "The ticket has been reopened successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ticket"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* TIC-U-0000 | You have insufficient permissions to reopen tickets.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "TIC-U-0000",
                    "message": "You either have insufficient permissions to reopen the ticket or reopening is disabled in general."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/tickets/{ticketId}/texts": {
      "parameters": [
        {
          "$ref": "#/components/parameters/ticketId"
        }
      ],
      "get": {
        "operationId": "getAllTextsForTicket",
        "tags": [
          "Tickets\\Texts"
        ],
        "summary": "List all texts for a specific ticket.",
        "description": "Retrieve the links to all texts of a ticket, including previous levels. If the level of a text does not match the current ticket level, it will be marked as \"canBeEdited\": false. Please be aware, that the response will only contain the URLs of the texts and not the data of each text.\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TicketTextLink"
                  }
                },
                "example": [
                  {
                    "url": "api/tickets/456/history/2/texts/issueTexts/01C7C411-B425-49AB-B0A3-28FCE6AEF564",
                    "canBeEdited": false
                  },
                  {
                    "url": "api/tickets/456/texts/solutionTexts/01C7C412-A425-49AB-B0A3-28FCE6AEF554",
                    "canBeEdited": true
                  },
                  {
                    "url": "api/tickets/456/history/1/texts/internalTexts/01C7C445-C425-49AB-B0A3-28FCE6AEF564",
                    "canBeEdited": false
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* TTX-A-0000 | You have insufficient permissions to read tickets.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "TTX-A-0000",
                    "message": "You either have insufficient permissions to read Tickets or reading is disabled in general."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/tickets/{ticketId}/texts/issueTexts": {
      "parameters": [
        {
          "$ref": "#/components/parameters/ticketId"
        }
      ],
      "get": {
        "operationId": "getAllIssueTextsForTicket",
        "tags": [
          "Tickets\\Texts"
        ],
        "summary": "List all issue texts for a specific ticket.",
        "description": "Retrieve the links to all issue texts of a ticket, inlcuding previous levels. If the level of a text does not match the current ticket level, it will be marked as \"canBeEdited\": false. Please be aware, that the response will only contain the URLs of the issue texts and not the actual data.\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TicketTextLink"
                  }
                },
                "example": [
                  {
                    "url": "api/tickets/456/history/2/texts/issueTexts/01C7C411-B425-49AB-B0A3-28FCE6AEF563",
                    "canBeEdited": false
                  },
                  {
                    "url": "api/tickets/456/texts/issueTexts/01C7C412-A425-49AB-B0A3-28FCE6AEF556",
                    "canBeEdited": true
                  },
                  {
                    "url": "api/tickets/456/history/1/texts/issueTexts/01C7C445-C425-49AB-B0A3-28FCE6AEF569",
                    "canBeEdited": false
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* TTX-A-0000 | You have insufficient permissions to read tickets.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "TTX-A-0000",
                    "message": "You either have insufficient permissions to read Tickets or reading is disabled in general."
                  }
                ]
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createTicketIssueText",
        "tags": [
          "Tickets\\Texts"
        ],
        "summary": "Create a new issue text for a ticket.",
        "description": "Create a new issue text for a ticket. The level will be automatically set to the current level of the ticket. If the field user is omitted the logged in user will be taken. The response will contain the generated values.\n",
        "requestBody": {
          "required": true,
          "description": "The text resource that will be added as issue text for the specified ticket.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TicketText"
              },
              "example": {
                "user": "JSMITH",
                "text": "Engine is not starting. Please fix asap."
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The issue text has been created successfully.",
            "headers": {
              "Location": {
                "description": "Link to the created resource.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketText"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Possible error codes are:\n* TTX-C-0003 | A ticket text with the given textId already exists.\n* TTX-C-0005 | A referenced entity could not be found.\n* TTX-C-0006 | At least one field has exceeded the allowed character length.\n* TTX-C-0200 | Ticket is closed. Changes are not allowed.\n* TTX-C-1000 | Malformed JSON content.\n* TTX-C-1001 | No content provided in the body of the request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "TTX-C-0006",
                    "message": "The property 'user' cannot have more than 12 characters."
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* TTX-C-0000 | You have insufficient permissions to create tickets.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "TTX-C-0000",
                    "message": "You either have insufficient permissions to create ticket texts or creating is disabled in general."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/tickets/{ticketId}/texts/issueTexts/{textId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/ticketId"
        },
        {
          "$ref": "#/components/parameters/ticketTextId"
        }
      ],
      "get": {
        "operationId": "getTicketIssueTextById",
        "tags": [
          "Tickets\\Texts"
        ],
        "summary": "Get issue text by id.",
        "description": "Retrieve the data of a single issue text of a ticket by its id.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketText"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* TTX-R-0000 | You have insufficient permissions to read tickets.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "TTX-R-0000",
                    "message": "You either have insufficient permissions to read Tickets or reading is disabled in general."
                  }
                ]
              }
            }
          }
        }
      },
      "put": {
        "operationId": "putTicketIssueText",
        "tags": [
          "Tickets\\Texts"
        ],
        "summary": "Create or update an issue text.",
        "description": "Update an issue text resource if it already exists. Otherwise it will be created. Please note that changes are only possible on the highest level of the ticket. That means you can't change history data.\n",
        "requestBody": {
          "required": true,
          "description": "The issue text resource. If the property **textId** is sent in the request it will be ignored because the textId in the URL is leading.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TicketText"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The issue text has been updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketText"
                }
              }
            }
          },
          "201": {
            "description": "The issue text has been created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketText"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.\nPossible error codes for Update are:\n* TTX-U-0200 | Ticket is closed. Changes are not allowed.\n* TTX-U-0201 | Changing history items of a ticket is not allowed.\n* TTX-U-0204 | The specified user is not the current hotliner of the ticket.\n* TTX-U-0205 | The specified user is not the author of the text.\n* TTX-U-0206 | Another user has already replied. Changes are no longer possible.\n* TTX-U-1000 | Malformed JSON content.\n* TTX-U-1001 | No content provided in the body of the request.\n\nPossible error codes for Create are:\n* TTX-C-0003 | A ticket text with the given textId already exists.\n* TTX-C-0005 | A referenced entity could not be found.\n* TTX-C-0006 | At least one field has exceeded the allowed character length.\n* TTX-C-0200 | Ticket is closed. Changes are not allowed.\n* TTX-C-1000 | Malformed JSON content.\n* TTX-C-1001 | No content provided in the body of the request.          \n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "TTX-U-0200",
                    "message": "Ticket is closed. Changes are not allowed."
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* TTX-U-0000 | You have insufficient permissions to update tickets.\n* TTX-C-0000 | You have insufficient permissions to create tickets.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "TTX-U-0000",
                    "message": "You either have insufficient permissions to update the issue text or updating is disabled in general."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/tickets/{ticketId}/texts/internalTexts": {
      "parameters": [
        {
          "$ref": "#/components/parameters/ticketId"
        }
      ],
      "get": {
        "operationId": "getAllInternalTextsForTicket",
        "tags": [
          "Tickets\\Texts"
        ],
        "summary": "List all internal texts for a specific ticket.",
        "description": "Retrieve the links to all internal texts of a ticket, inlcuding previous levels. If the level of a text does not match the current ticket level, it will be marked as \"canBeEdited\": false. Please be aware, that the response will only contain the URLs of the internal texts and not the actual data.\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TicketTextLink"
                  }
                },
                "example": [
                  {
                    "url": "api/tickets/456/history/2/texts/internalTexts/01C7C411-B425-49AB-B0A3-28FCE6AEF563",
                    "canBeEdited": false
                  },
                  {
                    "url": "api/tickets/456/texts/internalTexts/01C7C412-A425-49AB-B0A3-28FCE6AEF556",
                    "canBeEdited": true
                  },
                  {
                    "url": "api/tickets/456/history/1/texts/internalTexts/01C7C445-C425-49AB-B0A3-28FCE6AEF569",
                    "canBeEdited": false
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* TTX-A-0000 | You have insufficient permissions to read tickets.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "TTX-A-0000",
                    "message": "You either have insufficient permissions to read Tickets or reading is disabled in general."
                  }
                ]
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createTicketInternalText",
        "tags": [
          "Tickets\\Texts"
        ],
        "summary": "Create a new internal text for a ticket.",
        "description": "Create a new internal text for a ticket. The level will be automatically set to the current level of the ticket. If the field user is omitted the logged in user will be taken. The response will contain the generated values.\n",
        "requestBody": {
          "required": true,
          "description": "The text resource that will be added as internal text for the specified ticket.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TicketText"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The internal text has been created successfully.",
            "headers": {
              "Location": {
                "description": "Link to the created resource.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketText"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Possible error codes are:\n* TTX-C-0003 | A ticket text with the given textId already exists.\n* TTX-C-0005 | A referenced entity could not be found.\n* TTX-C-0006 | At least one field has exceeded the allowed character length.\n* TTX-C-0200 | Ticket is closed. Changes are not allowed.\n* TTX-C-1000 | Malformed JSON content.\n* TTX-C-1001 | No content provided in the body of the request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "TTX-C-0006",
                    "message": "The property 'user' cannot have more than 12 characters."
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* TTX-C-0000 | You have insufficient permissions to create tickets.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "TTX-C-0000",
                    "message": "You either have insufficient permissions to create ticket texts or creating is disabled in general."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/tickets/{ticketId}/texts/internalTexts/{textId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/ticketId"
        },
        {
          "$ref": "#/components/parameters/ticketTextId"
        }
      ],
      "get": {
        "operationId": "getTicketInternalTextById",
        "tags": [
          "Tickets\\Texts"
        ],
        "summary": "Get internal text by id.",
        "description": "Retrieve the data of a single internal text of a ticket by its id.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketText"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* TTX-R-0000 | You have insufficient permissions to read tickets.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "TTX-R-0000",
                    "message": "You either have insufficient permissions to read Tickets or reading is disabled in general."
                  }
                ]
              }
            }
          }
        }
      },
      "put": {
        "operationId": "putTicketInternalText",
        "tags": [
          "Tickets\\Texts"
        ],
        "summary": "Create or update an internal text.",
        "description": "Update an internal text resource if it already exists. Otherwise it will be created. Please note that changes are only possible on the highest level of the ticket. That means you can't change history data.\n",
        "requestBody": {
          "required": true,
          "description": "The internal text resource. If the property **textId** is sent in the request it will be ignored because the textId in the URL is leading.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TicketText"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The internal text has been updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketText"
                }
              }
            }
          },
          "201": {
            "description": "The internal text has been created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketText"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.\nPossible error codes for Update are:\n* TTX-U-0200 | Ticket is closed. Changes are not allowed.\n* TTX-U-0201 | Changing history items of a ticket is not allowed.\n* TTX-U-0204 | The specified user is not the current hotliner of the ticket.\n* TTX-U-0205 | The specified user is not the author of the text.\n* TTX-U-0206 | Another user has already replied. Changes are no longer possible.\n* TTX-U-1000 | Malformed JSON content.\n* TTX-U-1001 | No content provided in the body of the request.\n\nPossible error codes for Create are:\n* TTX-C-0003 | A ticket text with the given textId already exists.\n* TTX-C-0005 | A referenced entity could not be found.\n* TTX-C-0006 | At least one field has exceeded the allowed character length.\n* TTX-C-0200 | Ticket is closed. Changes are not allowed.\n* TTX-C-1000 | Malformed JSON content.\n* TTX-C-1001 | No content provided in the body of the request.          \n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "TTX-U-0200",
                    "message": "Ticket is closed. Changes are not allowed."
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* TTX-U-0000 | You have insufficient permissions to update tickets.\n* TTX-C-0000 | You have insufficient permissions to create tickets.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "TTX-U-0000",
                    "message": "You either have insufficient permissions to update the internal text or updating is disabled in general."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/tickets/{ticketId}/texts/solutionTexts": {
      "parameters": [
        {
          "$ref": "#/components/parameters/ticketId"
        }
      ],
      "get": {
        "operationId": "getAllSolutionTextsForTicket",
        "tags": [
          "Tickets\\Texts"
        ],
        "summary": "List all solution texts for a specific ticket.",
        "description": "Retrieve the links to all solution texts of a ticket, inlcuding previous levels. If the level of a text does not match the current ticket level, it will be marked as \"canBeEdited\": false. Please be aware, that the response will only contain the URLs of the solution texts and not the actual data.\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TicketTextLink"
                  }
                },
                "example": [
                  {
                    "url": "api/tickets/456/history/2/texts/solutionTexts/01C7C411-B425-49AB-B0A3-28FCE6AEF563",
                    "canBeEdited": false
                  },
                  {
                    "url": "api/tickets/456/texts/solutionTexts/01C7C412-A425-49AB-B0A3-28FCE6AEF556",
                    "canBeEdited": true
                  },
                  {
                    "url": "api/tickets/456/history/1/texts/solutionTexts/01C7C445-C425-49AB-B0A3-28FCE6AEF569",
                    "canBeEdited": false
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* TTX-A-0000 | You have insufficient permissions to read tickets.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "TTX-A-0000",
                    "message": "You either have insufficient permissions to read Tickets or reading is disabled in general."
                  }
                ]
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createTicketSolutionText",
        "tags": [
          "Tickets\\Texts"
        ],
        "summary": "Create a new solution text for a ticket.",
        "description": "Create a new solution text for a ticket. The level will be automatically set to the current level of the ticket. If the field user is omitted the logged in user will be taken. The response will contain the generated values.\n",
        "requestBody": {
          "required": true,
          "description": "The text resource that will be added as solution text for the specified ticket.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TicketText"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The solution text has been created successfully.",
            "headers": {
              "Location": {
                "description": "Link to the created resource.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketText"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Possible error codes are:\n* TTX-C-0003 | A ticket text with the given textId already exists.\n* TTX-C-0005 | A referenced entity could not be found.\n* TTX-C-0006 | At least one field has exceeded the allowed character length.\n* TTX-C-0200 | Ticket is closed. Changes are not allowed.\n* TTX-C-1000 | Malformed JSON content.\n* TTX-C-1001 | No content provided in the body of the request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "TTX-C-0006",
                    "message": "The property 'user' cannot have more than 12 characters."
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* TTX-C-0000 | You have insufficient permissions to create tickets.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "TTX-C-0000",
                    "message": "You either have insufficient permissions to create ticket texts or creating is disabled in general."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/tickets/{ticketId}/texts/solutionTexts/{textId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/ticketId"
        },
        {
          "$ref": "#/components/parameters/ticketTextId"
        }
      ],
      "get": {
        "operationId": "getTicketSolutionTextById",
        "tags": [
          "Tickets\\Texts"
        ],
        "summary": "Get solution text by id.",
        "description": "Retrieve the data of a single solution text of a ticket by its id.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketText"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* TTX-R-0000 | You have insufficient permissions to read tickets.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "TTX-R-0000",
                    "message": "You either have insufficient permissions to read Tickets or reading is disabled in general."
                  }
                ]
              }
            }
          }
        }
      },
      "put": {
        "operationId": "putTicketSolutionText",
        "tags": [
          "Tickets\\Texts"
        ],
        "summary": "Create or update a solution text.",
        "description": "Update a solution text resource if it already exists. Otherwise it will be created. Please note that changes are only possible on the highest level of the ticket. That means you can't change history data.\n",
        "requestBody": {
          "required": true,
          "description": "The solution text resource. If the property **textId** is sent in the request it will be ignored because the textId in the URL is leading.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TicketText"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The solution text has been updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketText"
                }
              }
            }
          },
          "201": {
            "description": "The solution text has been created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketText"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.\nPossible error codes for Update are:\n* TTX-U-0200 | Ticket is closed. Changes are not allowed.\n* TTX-U-0201 | Changing history items of a ticket is not allowed.\n* TTX-U-0204 | The specified user is not the current hotliner of the ticket.\n* TTX-U-0205 | The specified user is not the author of the text.\n* TTX-U-0206 | Another user has already replied. Changes are no longer possible.\n* TTX-U-1000 | Malformed JSON content.\n* TTX-U-1001 | No content provided in the body of the request.\n\nPossible error codes for Create are:\n* TTX-C-0003 | A ticket text with the given textId already exists.\n* TTX-C-0005 | A referenced entity could not be found.\n* TTX-C-0006 | At least one field has exceeded the allowed character length.\n* TTX-C-0200 | Ticket is closed. Changes are not allowed.\n* TTX-C-1000 | Malformed JSON content.\n* TTX-C-1001 | No content provided in the body of the request.          \n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "TTX-U-0200",
                    "message": "Ticket is closed. Changes are not allowed."
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* TTX-U-0000 | You have insufficient permissions to update tickets.\n* TTX-C-0000 | You have insufficient permissions to create tickets.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "TTX-U-0000",
                    "message": "You either have insufficient permissions to update the solution text or updating is disabled in general."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/tickets/{ticketId}/history": {
      "parameters": [
        {
          "$ref": "#/components/parameters/ticketId"
        }
      ],
      "get": {
        "operationId": "getTicketHistoryLevels",
        "tags": [
          "Tickets"
        ],
        "summary": "Get the history levels of a ticket.",
        "description": "Retrieve links to all levels of a ticket except the current one. E.g.: If a ticket has 4 levels, the history will contain 1-3. The levels are created by forwarding a ticket. Please be aware, that the response will only contain the URLs of the levels and not the actual data.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uri"
                  }
                },
                "example": [
                  "api/tickets/1",
                  "api/tickets/2",
                  "api/tickets/3"
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* TIC-A-0000 | You have insufficient permissions to read tickets.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "TIC-A-0000",
                    "message": "You either have insufficient permissions to read Tickets or reading is disabled in general."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/tickets/{ticketId}/history/{level}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/ticketId"
        },
        {
          "$ref": "#/components/parameters/ticketLevel"
        }
      ],
      "get": {
        "operationId": "getTicketHistory",
        "tags": [
          "Tickets"
        ],
        "summary": "Get the ticket history for a specific level.",
        "description": "Retrieve the ticket data from a specific history level. It represents the state of the ticket before it was forwarded.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ticket"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* TIC-R-0000 | You have insufficient permissions to read tickets.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "TIC-R-0000",
                    "message": "You either have insufficient permissions to read Tickets or reading is disabled in general."
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not found. Possible error codes are:\n* TIC-R-0005 | The referenced Ticket does not exist.\n* TIC-R-1002 | The requested level is not part of the ticket history.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "TIC-R-1002",
                    "message": "Level '3' is not part of the ticket history."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/tickets/{ticketId}/history/{level}/texts": {
      "parameters": [
        {
          "$ref": "#/components/parameters/ticketId"
        },
        {
          "$ref": "#/components/parameters/ticketLevel"
        }
      ],
      "get": {
        "operationId": "getHistoryTextsForTicket",
        "tags": [
          "Tickets\\Texts"
        ],
        "summary": "List history texts up to a specific level.",
        "description": "Retrieve links to history texts for the specified level and previous levels.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TicketTextLink"
                  }
                },
                "example": [
                  {
                    "url": "api/tickets/456/history/2/texts/issueTexts/01C7C411-B425-49AB-B0A3-28FCE6AEF563",
                    "canBeEdited": false
                  },
                  {
                    "url": "api/tickets/456/history/2/texts/internalTexts/01C7C412-A425-49AB-B0A3-28FCE6AEF556",
                    "canBeEdited": false
                  },
                  {
                    "url": "api/tickets/456/history/1/texts/solutionTexts/01C7C445-C425-49AB-B0A3-28FCE6AEF569",
                    "canBeEdited": false
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* THT-A-0000 | You have insufficient permissions to read tickets.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "THT-A-0000",
                    "message": "You either have insufficient permissions to read Tickets or reading is disabled in general."
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not found. Possible error codes are:\n* THT-A-0005 | The referenced Ticket does not exist.\n* THT-A-1002 | The requested level is not part of the ticket history.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "THT-A-1002",
                    "message": "Level '3' is not part of the ticket history."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/tickets/{ticketId}/history/{level}/texts/issueTexts": {
      "parameters": [
        {
          "$ref": "#/components/parameters/ticketId"
        },
        {
          "$ref": "#/components/parameters/ticketLevel"
        }
      ],
      "get": {
        "operationId": "getHistoryIssueTextsForTicket",
        "tags": [
          "Tickets\\Texts"
        ],
        "summary": "List history issue texts up to a specific level.",
        "description": "Retrieve links to history issue texts for the specified level and previous levels.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TicketTextLink"
                  }
                },
                "example": [
                  {
                    "url": "api/tickets/456/history/2/texts/issueTexts/01C7C411-B425-49AB-B0A3-28FCE6AEF563",
                    "canBeEdited": false
                  },
                  {
                    "url": "api/tickets/456/history/2/texts/issueTexts/01C7C412-A425-49AB-B0A3-28FCE6AEF556",
                    "canBeEdited": false
                  },
                  {
                    "url": "api/tickets/456/history/1/texts/issueTexts/01C7C445-C425-49AB-B0A3-28FCE6AEF569",
                    "canBeEdited": false
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* THT-A-0000 | You have insufficient permissions to read tickets.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "THT-A-0000",
                    "message": "You either have insufficient permissions to read Tickets or reading is disabled in general."
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not found. Possible error codes are:\n* THT-A-0005 | The referenced Ticket does not exist.\n* THT-A-1002 | The requested level is not part of the ticket history.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "THT-A-1002",
                    "message": "Level '3' is not part of the ticket history."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/tickets/{ticketId}/history/{level}/texts/issueTexts/{textId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/ticketId"
        },
        {
          "$ref": "#/components/parameters/ticketLevel"
        },
        {
          "$ref": "#/components/parameters/ticketTextId"
        }
      ],
      "get": {
        "operationId": "getTicketHistoryIssueTextById",
        "tags": [
          "Tickets\\Texts"
        ],
        "summary": "Get history issue text by id.",
        "description": "Retrieve the data of a single history issue text by its id.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketText"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* THT-R-0000 | You have insufficient permissions to read tickets.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "THT-R-0000",
                    "message": "You either have insufficient permissions to read tickets or reading is disabled in general."
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not Found. Possible error codes are:\n* THT-R-0005 | A referenced entity could not be found.\n* THT-R-1002 | The requested level is not part of the ticket history.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "THT-R-0005",
                    "message": "The requested ticket does not exist."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/tickets/{ticketId}/history/{level}/texts/internalTexts": {
      "parameters": [
        {
          "$ref": "#/components/parameters/ticketId"
        },
        {
          "$ref": "#/components/parameters/ticketLevel"
        }
      ],
      "get": {
        "operationId": "getHistoryInternalTextsForTicket",
        "tags": [
          "Tickets\\Texts"
        ],
        "summary": "List history internal texts up to a specific level.",
        "description": "Retrieve links to history internal texts for the specified level and previous levels.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TicketTextLink"
                  }
                },
                "example": [
                  {
                    "url": "api/tickets/456/history/2/texts/internalTexts/01C7C411-B425-49AB-B0A3-28FCE6AEF563",
                    "canBeEdited": false
                  },
                  {
                    "url": "api/tickets/456/history/2/texts/internalTexts/01C7C412-A425-49AB-B0A3-28FCE6AEF556",
                    "canBeEdited": false
                  },
                  {
                    "url": "api/tickets/456/history/1/texts/internalTexts/01C7C445-C425-49AB-B0A3-28FCE6AEF569",
                    "canBeEdited": false
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* THT-A-0000 | You have insufficient permissions to read tickets.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "THT-A-0000",
                    "message": "You either have insufficient permissions to read Tickets or reading is disabled in general."
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not found. Possible error codes are:\n* THT-A-0005 | The referenced Ticket does not exist.\n* THT-A-1002 | The requested level is not part of the ticket history.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "THT-A-1002",
                    "message": "Level '3' is not part of the ticket history."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/tickets/{ticketId}/history/{level}/texts/internalTexts/{textId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/ticketId"
        },
        {
          "$ref": "#/components/parameters/ticketLevel"
        },
        {
          "$ref": "#/components/parameters/ticketTextId"
        }
      ],
      "get": {
        "operationId": "getTicketHistoryInternalTextById",
        "tags": [
          "Tickets\\Texts"
        ],
        "summary": "Get history internal text by id.",
        "description": "Retrieve the data of a single history internal text by its id.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketText"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* THT-R-0000 | You have insufficient permissions to read tickets.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "THT-R-0000",
                    "message": "You either have insufficient permissions to read tickets or reading is disabled in general."
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not Found. Possible error codes are:\n* THT-R-0005 | A referenced entity could not be found.\n* THT-R-1002 | The requested level is not part of the ticket history.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "THT-R-0005",
                    "message": "The requested ticket does not exist."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/tickets/{ticketId}/history/{level}/texts/solutionTexts": {
      "parameters": [
        {
          "$ref": "#/components/parameters/ticketId"
        },
        {
          "$ref": "#/components/parameters/ticketLevel"
        }
      ],
      "get": {
        "operationId": "getHistorySolutionTextsForTicket",
        "tags": [
          "Tickets\\Texts"
        ],
        "summary": "List history solution texts up to a specific level.",
        "description": "Retrieve links to history solution texts for the specified level and previous levels.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TicketTextLink"
                  }
                },
                "example": [
                  {
                    "url": "api/tickets/456/history/2/texts/solutionTexts/01C7C411-B425-49AB-B0A3-28FCE6AEF563",
                    "canBeEdited": false
                  },
                  {
                    "url": "api/tickets/456/history/2/texts/solutionTexts/01C7C412-A425-49AB-B0A3-28FCE6AEF556",
                    "canBeEdited": false
                  },
                  {
                    "url": "api/tickets/456/history/1/texts/solutionTexts/01C7C445-C425-49AB-B0A3-28FCE6AEF569",
                    "canBeEdited": false
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* THT-A-0000 | You have insufficient permissions to read tickets.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "THT-A-0000",
                    "message": "You either have insufficient permissions to read Tickets or reading is disabled in general."
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not found. Possible error codes are:\n* THT-A-0005 | The referenced Ticket does not exist.\n* THT-A-1002 | The requested level is not part of the ticket history.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "THT-A-1002",
                    "message": "Level '3' is not part of the ticket history."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/tickets/{ticketId}/history/{level}/texts/solutionTexts/{textId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/ticketId"
        },
        {
          "$ref": "#/components/parameters/ticketLevel"
        },
        {
          "$ref": "#/components/parameters/ticketTextId"
        }
      ],
      "get": {
        "operationId": "getTicketHistorySolutionTextById",
        "tags": [
          "Tickets\\Texts"
        ],
        "summary": "Get history solution text by id.",
        "description": "Retrieve the data of a single history solution text by its id.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketText"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. Possible error codes are:\n* THT-R-0000 | You have insufficient permissions to read tickets.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "THT-R-0000",
                    "message": "You either have insufficient permissions to read tickets or reading is disabled in general."
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not Found. Possible error codes are:\n* THT-R-0005 | A referenced entity could not be found.\n* THT-R-1002 | The requested level is not part of the ticket history.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                },
                "example": [
                  {
                    "errorCode": "THT-R-0005",
                    "message": "The requested ticket does not exist."
                  }
                ]
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ErrorObject": {
        "title": "ErrorObject",
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string",
            "maxLength": 10,
            "description": "An error code which can be used to look up more information in this documentation.\nThe structure is **{objectType}-{actionType}-{errorNumber}**\n"
          },
          "message": {
            "type": "string",
            "description": "Detailed error message which contains more information about the error like field names or information on how the request should be modified to be valid."
          }
        }
      },
      "ISDateTime": {
        "title": "DateTime",
        "type": "object",
        "properties": {
          "Year": {
            "description": "",
            "type": "integer",
            "maximum": 9999,
            "minimum": 1753
          },
          "Month": {
            "description": "",
            "type": "integer",
            "maximum": 12,
            "minimum": 1
          },
          "Day": {
            "description": "",
            "type": "integer",
            "maximum": 31,
            "minimum": 1
          },
          "Hour": {
            "description": "",
            "type": "integer",
            "maximum": 23,
            "minimum": 0
          },
          "Minute": {
            "description": "",
            "type": "integer",
            "maximum": 59,
            "minimum": 0
          },
          "Second": {
            "description": "",
            "type": "integer",
            "maximum": 59,
            "minimum": 0
          }
        }
      },
      "ISExtendedDateTime": {
        "title": "ExtendedDateTime",
        "type": "object",
        "properties": {
          "Year": {
            "description": "",
            "type": "integer",
            "maximum": 9999,
            "minimum": 1753
          },
          "Month": {
            "description": "",
            "type": "integer",
            "maximum": 12,
            "minimum": 1
          },
          "Day": {
            "description": "",
            "type": "integer",
            "maximum": 31,
            "minimum": 1
          },
          "Hour": {
            "description": "",
            "type": "integer",
            "maximum": 23,
            "minimum": 0
          },
          "Minute": {
            "description": "",
            "type": "integer",
            "maximum": 59,
            "minimum": 0
          },
          "Second": {
            "description": "",
            "type": "integer",
            "maximum": 59,
            "minimum": 0
          },
          "TimeZoneId": {
            "type": "string",
            "description": "Contains a custom time zone id which indicates the local time zone of the client."
          },
          "TimeInUTC": {
            "type": "boolean",
            "nullable": true,
            "description": "If set to *true* the provided values for the date and time are understood as UTC values. Because **Innosoft** converts  these values back into the local time of the client the property *TimeZoneId* is mandatory if *TimeInUTC* is set to *true*. If set to *false* or *null* the values are not converted and the object behaves as if it was a normal DateTime object.\n"
          }
        }
      },
      "ResourceReferences": {
        "title": "ResourceReferences",
        "type": "object",
        "properties": {
          "itemCount": {
            "type": "integer"
          },
          "items": {
            "type": "array",
            "items": {
              "title": "Reference",
              "type": "object",
              "properties": {
                "url": {
                  "type": "string",
                  "format": "uri",
                  "description": "Complete URL of the target resource."
                },
                "isValid": {
                  "type": "boolean",
                  "description": "If this property is set to false the target resource is invalid (e.g. mandatory fields missing)."
                }
              }
            }
          }
        }
      },
      "TranslationObject": {
        "title": "TranslationObject",
        "type": "object",
        "properties": {
          "default": {
            "type": "string",
            "description": "Default translation. The allowed string length can vary between different resources.\nThis field is mandatory under two circumstances:\n\n* At least on language translation has been specified.\n* The field on the owning object is a translation type and is mandatory.\n"
          },
          "translations": {
            "type": "object",
            "description": "Dynamic object/dictionary with elements consisting of a string key and a string value. The key is either a predefined language key or the Innosoft language id.\n",
            "additionalProperties": {
              "type": "string",
              "description": "The translation value for the respective language key. The length of the values can vary between different resources, but should generally be the same as the length of the default value.\n"
            }
          }
        }
      },
      "RangeEntry": {
        "title": "RangeEntry",
        "type": "object",
        "required": [
          "mode",
          "operation",
          "fieldname",
          "low"
        ],
        "properties": {
          "mode": {
            "type": "string",
            "maxLength": 1,
            "enum": [
              "I",
              "E"
            ],
            "description": "Can be used to include or exclude the respective results. Possible values are:\n* I = Inclusive. The results of the search should only contain entities which fulfill the criteria.\n* E = Exclusive. The results of the search should only contain entities which do **not** fulfill the criteria.\n"
          },
          "operation": {
            "type": "string",
            "maxLength": 2,
            "enum": [
              "Eq",
              "Lt",
              "Gt",
              "Bt"
            ],
            "description": "The operation that defines the meaning of the fields **low** and **high** in relation the the field defined by fieldname.\nPossible values are:\n* Eq = Equals the value of *low*. *High* will be ignored.\n* Lt = Lesser than the value of *low*. *High* will be ignored.\n* Gt = Greater than the value of *low*. *High* will be ignored.\n* Bt = Between the values of *high* and *low*. The values of *high* and *low* are **included** in the range.\n"
          },
          "fieldname": {
            "type": "string",
            "description": "Name of a field of the resource you want to use for this range entry (e.g. \"type\" or \"address.street\")."
          },
          "low": {
            "description": "Depending on the specified *operation* and *mode* this property defines the first search parameter/value."
          },
          "high": {
            "description": "Only required for the operation *Bt* (Between). Same restrictions as *low*."
          }
        }
      },
      "Location": {
        "title": "Location",
        "type": "object",
        "required": [
          "name",
          "countryCodeId",
          "typeId",
          "statusId"
        ],
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 20,
            "description": "The Unique identifier for the location."
          },
          "name": {
            "type": "string",
            "maxLength": 33,
            "description": ""
          },
          "nameAffix1": {
            "type": "string",
            "maxLength": 33,
            "description": "Additional (part of the) name."
          },
          "nameAffix2": {
            "type": "string",
            "maxLength": 33,
            "description": "Additional (part of the) name."
          },
          "nameAffix3": {
            "type": "string",
            "maxLength": 33,
            "description": "Additional (part of the) name."
          },
          "address": {
            "title": "Address",
            "type": "object",
            "properties": {
              "street": {
                "type": "string",
                "maxLength": 33,
                "description": ""
              },
              "zipCode": {
                "type": "string",
                "maxLength": 10,
                "description": "Postal zip code of the location."
              },
              "city": {
                "type": "string",
                "maxLength": 33,
                "description": ""
              },
              "state": {
                "type": "string",
                "maxLength": 33,
                "description": "The state of the location (i.e. \"Texas\", \"Hessen\")."
              }
            }
          },
          "countryCodeId": {
            "type": "string",
            "maxLength": 4,
            "description": "ISO code for the country (i.e. \"DE\" for Germany). This property references the database field SPESEN.LANDKF."
          },
          "geolocation": {
            "title": "Geolocation",
            "type": "object",
            "properties": {
              "latitude": {
                "type": "number",
                "format": "double",
                "description": "The floating-point number of the latitude angle."
              },
              "longitude": {
                "type": "number",
                "format": "double",
                "description": "The floating point number of the longitude angle."
              }
            }
          },
          "typeId": {
            "type": "integer",
            "minimum": -32768,
            "maximum": 32767,
            "description": "Reference to a location type (ADRTYP.ADRTYPNR)."
          },
          "mainGroupId": {
            "type": "integer",
            "description": "Reference to the database field OPTION_O.OGRNR."
          },
          "languageId": {
            "type": "integer",
            "minimum": 0,
            "maximum": 15,
            "description": "One of the Innosoft language ids:\n* 0 = German\n* 1 = English\n* 2 = Dutch\n* 3 = French\n* 4 = Spanish\n* 5 = Italian\n* 6 = Danish\n* 7 = Polish\n* 8 = Czech\n* 9 = Russian\n* 10 = Portuguese\n* 11 = Chinese\n* 12 = Japanese\n* 13 = Argentinean\n* 14 = Portuguese (Brazil)\n* 15 = Korean\n"
          },
          "parentId": {
            "type": "string",
            "maxLength": 20,
            "description": "Id of the superior address (location or debtor)."
          },
          "statusId": {
            "type": "integer",
            "minimum": -32768,
            "maximum": 32767,
            "description": "A number representing the status of the location (i.e. 0 for active and 1 for inactive)."
          },
          "matchCode": {
            "type": "string",
            "maxLength": 33,
            "description": ""
          },
          "timeZoneId": {
            "type": "integer",
            "description": "Reference to a time zone (TIMEZONES.TZID). Can be ommitted if you provide an *externalTimeZoneId*."
          },
          "externalTimeZoneId": {
            "type": "string",
            "maxLength": 128,
            "description": "The external id of the timezone. If set the value of timeZoneId will be ignored."
          }
        }
      },
      "Debtor": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Location"
          },
          {
            "title": "Debtor",
            "type": "object",
            "required": [
              "vatRateId",
              "priceListId",
              "termsOfPaymentId",
              "invoiceCurrencyId"
            ],
            "properties": {
              "poBox": {
                "title": "PoBox",
                "type": "object",
                "description": "A post office address object, if the debtor has a postal address.",
                "properties": {
                  "number": {
                    "type": "string",
                    "maxLength": 33,
                    "description": "The number of the post office box."
                  },
                  "zipCode": {
                    "type": "string",
                    "maxLength": 10,
                    "description": "The postal zip code of the post office."
                  }
                }
              },
              "bank": {
                "title": "Bank",
                "type": "object",
                "description": "An object which exposes bank related information.",
                "properties": {
                  "bankName": {
                    "type": "string",
                    "maxLength": 50,
                    "description": "The name of the bank."
                  },
                  "clientId": {
                    "type": "string",
                    "maxLength": 20,
                    "description": "The id of the client (debtor) at the specified bank."
                  },
                  "iban": {
                    "type": "string",
                    "maxLength": 33,
                    "description": "International Bank Account Number."
                  },
                  "bic": {
                    "type": "string",
                    "maxLength": 33,
                    "description": "Business Identifier Code."
                  }
                }
              },
              "vatRateId": {
                "type": "string",
                "maxLength": 4,
                "description": "The identifier for the rate used in the VAT calculation. Reference to the database field NMWST.MWSTKZ."
              },
              "priceListId": {
                "type": "integer",
                "minimum": -32768,
                "maximum": 32767,
                "description": "Reference to a price list (PLISTE.PNR)."
              },
              "taxId": {
                "type": "string",
                "maxLength": 33,
                "description": "Reference to a unique tax registration number (VKUNZUS.USTID)."
              },
              "termsOfPaymentId": {
                "type": "integer",
                "description": "Reference to the database field ZAHLUNG.ZNR."
              },
              "invoiceCurrencyId": {
                "type": "string",
                "maxLength": 3,
                "description": "Reference to the database field CUFAKTOR.CURRENCY."
              },
              "billingId": {
                "type": "integer",
                "enum": [
                  0,
                  1,
                  2,
                  3
                ],
                "description": "One of the Innosoft billing ids. Please note that the meaning of each code can be overwritten in your instance \nof the Innosoft system but the default values are:\n* 0 = Bill after expenses\n* 1 = Fixed price\n* 2 = Bill after expenses up to a maximum\n* 3 = Invoice for a sales order\n"
              },
              "matchCode": {
                "type": "string",
                "maxLength": 33,
                "description": ""
              }
            }
          }
        ]
      },
      "Machine": {
        "title": "Machine",
        "type": "object",
        "required": [
          "name",
          "locationId"
        ],
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 20,
            "readOnly": true,
            "description": "The Unique identifier for the machine."
          },
          "externalId": {
            "type": "string",
            "maxLength": 20,
            "description": "Commonly used to store serial numbers or ids of external systems."
          },
          "name": {
            "type": "string",
            "maxLength": 33,
            "description": ""
          },
          "remark": {
            "type": "string",
            "maxLength": 33,
            "description": ""
          },
          "locationId": {
            "type": "string",
            "maxLength": 20,
            "description": "Reference to the *id* of the machine location (location or debtor)."
          },
          "installationDate": {
            "$ref": "#/components/schemas/ISDateTime"
          },
          "warrantyDate": {
            "$ref": "#/components/schemas/ISDateTime"
          },
          "typeId": {
            "type": "string",
            "maxLength": 33,
            "description": "Can be used to define the type of the machine. If provided, the referenced type must exist (MASCHTYP.MASCHTYP)."
          },
          "statusId": {
            "type": "integer",
            "minimum": -32768,
            "maximum": 32767,
            "default": 0,
            "description": "A number representing the status of the machine (i.e. 0 for active and 1 for inactive)."
          }
        }
      },
      "SparePart": {
        "title": "SparePart",
        "type": "object",
        "required": [
          "partNumber",
          "names"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Internal id of the spare part. Not displayed in the UI of the Resource Planning so  please use the *partNumber* for the official number.\n"
          },
          "partNumber": {
            "type": "string",
            "maxLength": 30,
            "description": "Official part number for this spare part."
          },
          "names": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TranslationObject"
              },
              {
                "description": "Default value and translations for the name. Maximum 170 characters per translation. At least the default translation is mandatory."
              }
            ]
          },
          "descriptions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TranslationObject"
              },
              {
                "description": "Default value and translation for the description. No maximum character limitation."
              }
            ]
          },
          "unitNames": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TranslationObject"
              },
              {
                "description": "Default value and translations for the unit name (e.g. \"pieces\", \"liter\", \"meter\", \"cubic meter\"). Maximum 6 characters per translation"
              }
            ]
          },
          "productGroupId": {
            "type": "integer",
            "description": "Reference to a product group (PRODGRP.GRPNR)."
          },
          "mainGroupId": {
            "type": "integer",
            "description": "Reference to the database field OPTION_O.OGRNR."
          },
          "purchasePrice": {
            "type": "number",
            "format": "double",
            "description": ""
          },
          "sellingPrice": {
            "type": "number",
            "format": "double",
            "description": ""
          },
          "statusId": {
            "type": "integer",
            "minimum": -32768,
            "maximum": 32767,
            "default": 0,
            "description": "A number representing the status of the spare part (i.e. 0 for active and 1 for inactive)."
          },
          "matchCode": {
            "type": "string",
            "maxLength": 50,
            "description": ""
          }
        }
      },
      "Ticket": {
        "title": "Ticket",
        "type": "object",
        "properties": {
          "ticketId": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique identifier."
          },
          "level": {
            "type": "integer",
            "readOnly": true,
            "description": "A new ticket starts with the level 1. Each forward will result in a new level, leaving the old ones locked for history purposes. Only the highest level can be edited until it is being closed."
          },
          "title": {
            "type": "string",
            "maxLength": 80,
            "description": "Title text of the ticket."
          },
          "typeId": {
            "type": "string",
            "maxLength": 10,
            "description": "Reference to the type of the ticket. This property references the field PKEY from the Innosoft table PROKEY."
          },
          "processingStatusId": {
            "type": "string",
            "enum": [
              "OpenNew",
              "OpenForwarded",
              "Reopened",
              "Predecessor",
              "Closed"
            ],
            "readOnly": true,
            "description": "Internal ticket status. You can change it indirectly via the respective actions like close, forward, or reopen."
          },
          "displayStatusId": {
            "type": "integer",
            "description": "Reference to the display status (PROSTATUS.PROSTATUSKEY).\n\n---\n**Note:** This status does not affect logic like the **processingStatusId** does. Take the following example: If you define a display status \"closed\" and set the ticket to it, it will still be editable until you explicitly call close.\n\n---\n"
          },
          "hotliner": {
            "type": "string",
            "maxLength": 12,
            "description": "Login name of the currently responsible person (PWUSER.NAME). Can be omitted if you provide a groupId. If neither of the two are provided, the ReST-Api user will be taken as hotliner. Providing both will result in an error."
          },
          "groupId": {
            "type": "integer",
            "description": "Id of the currently responsible group (OPTION_G.GRNR). Can be omitted if you provide a hotliner. If neither of the two are provided, the ReST-Api user will be taken as hotliner. Providing both will result in an error."
          },
          "fixedDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ISDateTime"
              },
              {
                "description": "Date until the ticket should be resolved."
              }
            ]
          },
          "levelStart": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ISDateTime"
              },
              {
                "readOnly": true,
                "description": "Read-only time stamp of when the ticket level started."
              }
            ]
          },
          "levelEnd": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ISDateTime"
              },
              {
                "readOnly": true,
                "description": "Read-only time stamp of when the ticket level ended."
              }
            ]
          },
          "urgency": {
            "type": "integer",
            "description": "A number that indicates the priority of the ticket."
          },
          "addressId": {
            "type": "string",
            "maxLength": 20,
            "description": "Related address/customer of the ticket (VKUNADR.ADRNR)."
          },
          "contactPersonId": {
            "type": "integer",
            "description": "Contact person of the ticket (VKUNPART.POS)."
          },
          "machineId": {
            "type": "string",
            "maxLength": 20,
            "description": "This field lets you assign a machine to the ticket (MAPARK.MASCHNR)."
          },
          "projectId": {
            "type": "string",
            "maxLength": 20,
            "description": "The related project (KUNDE.PROJNR)."
          },
          "faultCodeId": {
            "type": "string",
            "maxLength": 20,
            "description": "Error code: Fault (PROSTOER.STOERUNG_CODE)."
          },
          "faultLocationCodeId": {
            "type": "string",
            "maxLength": 20,
            "description": "Error code: Fault location (PROORT.ORT_CODE)."
          },
          "causeCodeId": {
            "type": "string",
            "maxLength": 20,
            "description": "Error code: Cause (PROURS.URSACHE_CODE)."
          },
          "repairCodeId": {
            "type": "string",
            "maxLength": 20,
            "description": "Error code: Repair (PROBEH.BEHEBUNG_CODE)."
          }
        }
      },
      "TicketText": {
        "title": "TicketText",
        "type": "object",
        "properties": {
          "textId": {
            "type": "string",
            "readOnly": true,
            "maxLength": 50,
            "description": "Unique identifier (ISGUID)."
          },
          "level": {
            "type": "integer",
            "readOnly": true,
            "description": "A new ticket starts with the level 1. Each forward will result in a new level, leaving the old ones locked for history purposes. Only the highest level can be edited until it is being closed."
          },
          "user": {
            "type": "string",
            "maxLength": 12,
            "description": "Login name of the person who wrote the text (PWUSER.NAME)."
          },
          "text": {
            "type": "string",
            "description": "The actual text."
          },
          "utcTimeStamp": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ISDateTime"
              },
              {
                "readOnly": true,
                "description": "Read-only UTC time stamp of when the text was written or changed."
              }
            ]
          }
        }
      },
      "TicketTextLink": {
        "title": "TicketTextLink",
        "properties": {
          "url": {
            "type": "string",
            "format": "uri",
            "description": ""
          },
          "canBeEdited": {
            "type": "boolean",
            "description": ""
          }
        }
      },
      "DebtorInfo": {
        "title": "DebtorInfo",
        "type": "object",
        "properties": {
          "vatRateId": {
            "type": "string",
            "maxLength": 4,
            "description": "The identifier for the rate used in the VAT calculation (NMWST.MWSTKZ).\n\n**Default:** vatRateId of the debtor referenced by debtorId.\n"
          },
          "priceListId": {
            "type": "integer",
            "minimum": -32768,
            "maximum": 32767,
            "description": "The identifier of the price list (PLISTE.PNR).\n      \n**Default:** priceListId of the debtor referenced by debtorId.\n"
          },
          "termsOfPaymentId": {
            "type": "integer",
            "description": "Reference to the database field ZAHLUNG.ZNR.\n      \n**Default:** termsOfPaymentId of the debtor referenced by debtorId.\n"
          },
          "invoiceCurrencyId": {
            "type": "string",
            "maxLength": 3,
            "description": "Reference to the database field CUFAKTOR.CURRENCY.\n\n**Default:** invoiceCurrencyId of the debtor referenced by debtorId.\n"
          },
          "billingId": {
            "type": "integer",
            "minimum": 0,
            "maximum": 3,
            "description": "One of the Innosoft billing codes. Please note that the meaning of each code can be overwritten in your instance of the Innosoft system but the default values are:\n* 0 = Bill after expenses\n* 1 = Fixed price\n* 2 = Bill after expenses up to a maximum\n* 3 = Invoice for a sales order\n"
          },
          "languageId": {
            "type": "integer",
            "minimum": 0,
            "maximum": 15,
            "description": "One of the Innosoft language ids:\n* 0 = German\n* 1 = English\n* 2 = Dutch\n* 3 = French\n* 4 = Spanish\n* 5 = Italian\n* 6 = Danish\n* 7 = Polish\n* 8 = Czech\n* 9 = Russian\n* 10 = Portuguese\n* 11 = Chinese\n* 12 = Japanese\n* 13 = Argentinean\n* 14 = Portuguese (Brazil)\n* 15 = Korean\n\n**Default:** languageId of the debtor referenced by debtorId.\n"
          }
        }
      },
      "Project": {
        "title": "Project",
        "type": "object",
        "required": [
          "begin",
          "end",
          "mainGroupId",
          "codeId"
        ],
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 20,
            "readOnly": true,
            "description": "The Unique identifier for the project."
          },
          "externalId": {
            "type": "string",
            "maxLength": 20,
            "description": "Can be used as identifier from an external system."
          },
          "locationId": {
            "type": "string",
            "maxLength": 20,
            "description": "Reference to the id of the address (location or debtor) where the project will take place. Can be omitted if you also provide a machine with a valid location by posting a CompositeProject.\n"
          },
          "ordererId": {
            "type": "string",
            "maxLength": 20,
            "description": "Reference to the id of a location or a debtor.\n**Default:** the same value as the locationId (also if the locationId is copied from a machine).\n"
          },
          "debtorId": {
            "type": "string",
            "maxLength": 20,
            "description": "Reference to the id of a debtor which will be useful for financial activities during the project.\n\n**Default:** the same value as the locationId or a parent of the referenced address in locationId. The value depends on the type of the referenced address. If the address is a debtor the id of this debtor is used. If the address is a location the server will try to find the first debtor in the address hierarchy of the location.\n\nThe debtor validation can be reduced to a mere existence check, by setting a flag in the database field OPTIONEN_E.OPTIONEN (The 25th bit has to be '0').\n"
          },
          "orderTypeId": {
            "type": "integer",
            "description": "Reference to the type of the order which led to this project (AUART.AUART).\nDefault: reference to the first entry in the table AUART or 0 if the table is empty.\n"
          },
          "activity": {
            "type": "string",
            "maxLength": 50,
            "description": ""
          },
          "keyword": {
            "type": "string",
            "maxLength": 33,
            "description": ""
          },
          "begin": {
            "$ref": "#/components/schemas/ISDateTime"
          },
          "end": {
            "$ref": "#/components/schemas/ISDateTime"
          },
          "statusId": {
            "type": "integer",
            "minimum": -32768,
            "maximum": 32767,
            "description": "Reference to the database field AUSTATUS.NR.\n\n**Default:** If there is an entry with beschreibung = 1 in the Innosoft table FELDINHALT for GRUPPE = 9 and ZAEHLER = 567 the content of the field BESCHREIBUNG converted to an integer.\n\nIf this is not successful or if there is no entry the default value will be the first entry from the table AUSTATUS ordered by NR.\n"
          },
          "mainGroupId": {
            "type": "integer",
            "description": "Reference to the database field OPTION_O.OGRNR."
          },
          "codeId": {
            "type": "integer",
            "minimum": -32768,
            "maximum": 32767,
            "description": "Code for the classification of the project (OPTION_K.KNR).\nThe field TYP of the referenced code has to be 5 or 6.\n"
          },
          "invoicingCodeId": {
            "type": "integer",
            "enum": [
              0,
              3,
              4
            ],
            "default": 0,
            "description": "One of the following invoicing codes: * 0 = Standard invoicing * 3 = Collective project (partial order) * 4 = Collective project (complete order)\n"
          },
          "debtorInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DebtorInfo"
              },
              {
                "description": "Complex object for financial numbers and references. The values for each property of the debtorInfo will be copied from the debtor referenced by debtorId if it is null in the request."
              }
            ]
          },
          "additionalDescription": {
            "type": "string"
          },
          "orderDate": {
            "$ref": "#/components/schemas/ISDateTime"
          }
        }
      },
      "ProjectContactPerson": {
        "title": "ProjectContactPerson",
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "Reference to the id of an existing contact person."
          },
          "projectId": {
            "type": "string",
            "maxLength": 20,
            "readOnly": true,
            "description": "Reference to the project the contact person is assigned to."
          },
          "type": {
            "type": "string",
            "maxLength": 50,
            "description": "Short description of the relation of the contact person to the project."
          }
        }
      },
      "ProjectMachine": {
        "title": "ProjectMachine",
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 20,
            "description": "Reference to a machine."
          },
          "projectId": {
            "type": "string",
            "maxLength": 20,
            "readOnly": true,
            "description": "Reference to the project the machine is assigned to."
          },
          "additionalId": {
            "type": "string",
            "maxLength": 20,
            "description": "Additional id field which can be used for keys from external systems.\n\n**Default:** additionalId of the machine referenced by the field id.\n"
          },
          "name": {
            "type": "string",
            "maxLength": 33,
            "description": "**Default:** name of the machine referenced by the field id."
          }
        }
      },
      "ProjectMaterial": {
        "title": "ProjectMaterial",
        "type": "object",
        "required": [
          "quantity"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique identifier for the project material."
          },
          "projectId": {
            "type": "string",
            "maxLength": 20,
            "readOnly": true,
            "description": "Reference to the project the material is assigned to."
          },
          "materialId": {
            "type": "integer",
            "description": "Reference to the id of an existing material (MATART.ARTNR). Can be omitted if you provide a *materialNumber*. If you want to update an existing project material this property will become readonly and will be ignored in any request.            \n\n**Default:** *materialId* of the material from MATART referenced by *materialNumber*.\n"
          },
          "materialNumber": {
            "type": "string",
            "maxLength": 30,
            "description": "Reference to the materialNumber of an existing material (MATART.ARTIKELNUMMER). Can be omitted if you provide a *materialId*.\n\n**Default:** *materialNumber* of the material from MATART referenced by *materialId*.\n"
          },
          "name": {
            "type": "string",
            "maxLength": 170,
            "description": "Short description or name of the material.\n\n**Default:** *name* of the material referenced by *materialId* or *materialNumber*.\n"
          },
          "quantity": {
            "type": "number",
            "format": "double",
            "description": "Floating-point number to be able to provide quantities like 1.5 liter."
          }
        }
      },
      "ContactPerson": {
        "title": "ContactPerson",
        "type": "object",
        "required": [
          "familyName",
          "addressId"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique Identifier"
          },
          "familyName": {
            "type": "string",
            "maxLength": 33,
            "description": ""
          },
          "addressId": {
            "type": "string",
            "maxLength": 22,
            "description": "Reference to the *id* of an address (location or debtor)"
          },
          "givenName": {
            "type": "string",
            "maxLength": 33,
            "description": ""
          },
          "salutation": {
            "type": "string",
            "maxLength": 33,
            "description": "The prefix used when addressing the contact person (i.e. Madam/Sir)."
          },
          "title": {
            "type": "string",
            "maxLength": 33,
            "description": "The professional title (i.e. Ing./Dr.)"
          },
          "gender": {
            "type": "integer",
            "enum": [
              0,
              1
            ],
            "description": "* 0 = Male\n* 1 = Female\n"
          },
          "department": {
            "type": "string",
            "maxLength": 50,
            "description": "The department where the contact person works or for which they are responsible."
          },
          "function": {
            "type": "string",
            "maxLength": 33,
            "description": "The function occupied in the organization."
          },
          "telephone1": {
            "type": "string",
            "maxLength": 33,
            "description": "Primary phone number."
          },
          "telephone2": {
            "type": "string",
            "maxLength": 33,
            "description": "Secondary phone number."
          },
          "mobile1": {
            "type": "string",
            "maxLength": 33,
            "description": "Primary mobile phone number."
          },
          "mobile2": {
            "type": "string",
            "maxLength": 33,
            "description": "Secondary phone number."
          },
          "email1": {
            "type": "string",
            "maxLength": 100,
            "description": "Primary e-mail address."
          },
          "email2": {
            "type": "string",
            "maxLength": 100,
            "description": "Secondary e-mail address."
          },
          "fax": {
            "type": "string",
            "maxLength": 33,
            "description": "The fax number where the contact person can be reached."
          },
          "statusId": {
            "type": "integer",
            "minimum": -32768,
            "maximum": 32767,
            "default": 0,
            "description": "A number representing the status of the contact person (i.e. 0 for active and 1 for inactive)."
          },
          "isMainContact": {
            "type": "boolean",
            "nullable": true,
            "description": "Specifies if the contact person is the main contact person of the organization or department."
          },
          "flag1": {
            "type": "boolean",
            "nullable": true,
            "description": "Can be used to store additional settings."
          },
          "flag2": {
            "type": "boolean",
            "nullable": true,
            "description": "Can be used to store additional settings."
          },
          "flag3": {
            "type": "boolean",
            "nullable": true,
            "description": "Can be used to store additional settings."
          },
          "flag4": {
            "type": "boolean",
            "nullable": true,
            "description": "Can be used to store additional settings."
          }
        }
      },
      "InvoicableServiceReport": {
        "title": "Invoicable Service Report",
        "type": "object",
        "required": [
          "resourceId"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "The Unique identifier for the service report."
          },
          "begin": {
            "$ref": "#/components/schemas/ISDateTime"
          },
          "end": {
            "$ref": "#/components/schemas/ISDateTime"
          },
          "resourceId": {
            "type": "string",
            "maxLength": 10,
            "description": "Reference to the database field RESSLIST.RESSNR."
          },
          "projectId": {
            "type": "string",
            "maxLength": 20,
            "description": "Reference to the project the service report belongs to."
          },
          "assignmentId": {
            "type": "integer",
            "description": "Reference to the assignment the service report belongs to."
          },
          "workingTimes": {
            "description": "List of the working times of the technician.",
            "type": "array",
            "items": {
              "title": "Working time",
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Identifier for the working time. Only unique for the service report itself."
                },
                "activityTypeId": {
                  "type": "string",
                  "maxLength": 3,
                  "enum": [
                    "NOR",
                    "U25",
                    "U30",
                    "U50",
                    "U5N",
                    "USO",
                    "UFT",
                    "UFH",
                    "TAG",
                    "F25",
                    "F30",
                    "F50",
                    "F5N",
                    "FSO",
                    "FFT",
                    "FFH",
                    "FH",
                    "SA",
                    "U6N",
                    "U7N",
                    "WA",
                    "WEG"
                  ],
                  "description": "Identifier for one of the Innosoft activity types:\n\n**Working:**\n* NOR = normal\n* U25 = first overtime category\n* U30 = on Saturdays\n* U50 = second overtime category\n* U5N = at night\n* USO = on Sundays\n* UFT = on a holiday\n* UFH = on a special/high holiday\n* TAG = whole day if a daily rate is used\n\n**Driving:**\n* F25 = first overtime category\n* F30 = on Saturdays\n* F50 = second overtime category\n* F5N = at night\n* FSO = on Sundays\n* FFT = on a holday\n* FFH = on a special/high holdiay\n\n**Special:**\n* FH = trip home to the family\n* SA = stint compensation\n* U6N = additional overtime category\n* U7N = additional overtime category\n* WA = idle time\n* WEG = intermediate trip (e.g. workplace to hotel)\n"
                },
                "date": {
                  "$ref": "#/components/schemas/ISDateTime"
                },
                "minutes": {
                  "type": "integer",
                  "description": "Duration in minutes."
                }
              }
            }
          },
          "cashExpenses": {
            "description": "List of the cash expenses.",
            "type": "array",
            "items": {
              "title": "Cash expense",
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Identifier for the cash expense. Only unique for the service report itself."
                },
                "name": {
                  "type": "string",
                  "maxLength": 40,
                  "description": "Name or short description of the cash expense."
                },
                "quantity": {
                  "type": "number",
                  "format": "double",
                  "description": "The amount of the product being bought with this cash expense."
                },
                "price": {
                  "type": "number",
                  "format": "double",
                  "description": "Base price for a single unit."
                },
                "currencyId": {
                  "type": "string",
                  "maxLength": 3,
                  "description": "Reference to the database field CUFAKTOR.CURRENCY."
                },
                "exchangeRatio": {
                  "type": "number",
                  "format": "double",
                  "description": "Exchange ratio for the given currency in comparison to the default currency."
                },
                "typeId": {
                  "type": "integer",
                  "description": "The Id of the cash expense type. Reference to the database field BARAUS.NR."
                }
              }
            }
          },
          "materials": {
            "description": "List of used materials.",
            "type": "array",
            "items": {
              "title": "Material",
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Identifier for the material. Only unique for the service report itself."
                },
                "materialNumber": {
                  "type": "string",
                  "maxLength": 30,
                  "description": "Reference to the database field MATART.ARTIKELNUMMER."
                },
                "name": {
                  "type": "string",
                  "maxLength": 170,
                  "description": ""
                },
                "quantity": {
                  "type": "number",
                  "format": "double",
                  "description": "Floating-point number to be able to provide quantities like 1.5 liter."
                }
              }
            }
          }
        }
      },
      "OptionsObject": {
        "title": "OptionsObject",
        "type": "object",
        "properties": {
          "checkbox0": {
            "type": "boolean",
            "nullable": true,
            "default": false,
            "description": "Marks if this checkbox is set in the Innosoft Resource Planning."
          },
          "checkbox1": {
            "type": "boolean",
            "nullable": true,
            "default": false,
            "description": "Marks if this checkbox is set in the Innosoft Resource Planning."
          },
          "checkbox2": {
            "type": "boolean",
            "nullable": true,
            "default": false,
            "description": "Marks if this checkbox is set in the Innosoft Resource Planning."
          },
          "checkbox3": {
            "type": "boolean",
            "nullable": true,
            "default": false,
            "description": "Marks if this checkbox is set in the Innosoft Resource Planning."
          },
          "checkbox4": {
            "type": "boolean",
            "nullable": true,
            "default": false,
            "description": "Marks if this checkbox is set in the Innosoft Resource Planning."
          },
          "checkbox5": {
            "type": "boolean",
            "nullable": true,
            "default": false,
            "description": "Marks if this checkbox is set in the Innosoft Resource Planning."
          },
          "checkbox6": {
            "type": "boolean",
            "nullable": true,
            "default": false,
            "description": "Marks if this checkbox is set in the Innosoft Resource Planning."
          },
          "checkbox7": {
            "type": "boolean",
            "nullable": true,
            "default": false,
            "description": "Marks if this checkbox is set in the Innosoft Resource Planning."
          },
          "checkbox8": {
            "type": "boolean",
            "nullable": true,
            "default": false,
            "description": "Marks if this checkbox is set in the Innosoft Resource Planning."
          },
          "checkbox9": {
            "type": "boolean",
            "nullable": true,
            "default": false,
            "description": "Marks if this checkbox is set in the Innosoft Resource Planning."
          },
          "checkbox10": {
            "type": "boolean",
            "nullable": true,
            "default": false,
            "description": "Marks if this checkbox is set in the Innosoft Resource Planning."
          },
          "checkbox11": {
            "type": "boolean",
            "nullable": true,
            "default": false,
            "description": "Marks if this checkbox is set in the Innosoft Resource Planning."
          },
          "checkbox12": {
            "type": "boolean",
            "nullable": true,
            "default": false,
            "description": "Marks if this checkbox is set in the Innosoft Resource Planning."
          },
          "checkbox13": {
            "type": "boolean",
            "nullable": true,
            "default": false,
            "description": "Marks if this checkbox is set in the Innosoft Resource Planning."
          }
        }
      },
      "AbsentAssignment": {
        "title": "Absent assignment",
        "type": "object",
        "required": [
          "codeId",
          "begin",
          "end"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "The identifier for the assignment."
          },
          "resource": {
            "title": "Resource",
            "description": "Reference to an **Innosoft** resource (i.e. a technician or a utility vehicle).\n\n**Please note**, that you must have permissions for the group and the main group of the resource. If you want to  move an absent assignment from one resource to another you need write permissions for the old group and main group  as well as the new group and main group of the destination resource.\n",
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "string",
                "maxLength": 20,
                "description": "Reference to the database field RESSLIST.RESSNR."
              },
              "immutable": {
                "type": "boolean",
                "nullable": true,
                "default": false,
                "description": "Defines, whether the resource can be changed in the graphical overview of the Innosoft Resource Planning."
              }
            }
          },
          "codeId": {
            "type": "integer",
            "minimum": -32768,
            "maximum": 32767,
            "description": "Code for the classification of the assignment. Reference to the database field OPTION_K.KNR.\n(Remark: The value for the field *TYP* of the referenced entry in the OPTION_K table must be 1 or 2.)\n"
          },
          "begin": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ISExtendedDateTime"
              },
              {
                "description": "Begin of the absent period.\n\n(Remark: If you set the properties for hour, minute and second to *null* in the request  the time will default to the database field OPTION_E.ARBEITSBEGINN)\n"
              }
            ]
          },
          "end": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ISExtendedDateTime"
              },
              {
                "description": "End of the absent period.\n\n**Attention:** The difference between begin and end must be **at least 15 minutes**.  Smaller periods are not supported by the Innosoft system.\n\n(Remark: If you set the properties for hour, minute and second to *null* in the request  the time will default to the database field OPTION_E.ARBEITSENDE)\n"
              }
            ]
          },
          "beginOfWork": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ISExtendedDateTime"
              },
              {
                "description": "Can be ignored (exists because of technical reasons in order to handle all assignments uniformly).\n\n**Default:** same value as *begin*.\n"
              }
            ]
          },
          "endOfWork": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ISExtendedDateTime"
              },
              {
                "description": "Can be ignored (exists because of technical reasons in order to handle all assignments uniformly).\n\n**Default:** same value as *end*.\n"
              }
            ]
          },
          "beginImmutable": {
            "type": "boolean",
            "nullable": true,
            "default": false,
            "description": "Marks if the *begin* can not be changed accidentally in the graphical overview of the Innosoft Resource Planning."
          },
          "endImmutable": {
            "type": "boolean",
            "nullable": true,
            "default": false,
            "description": "Marks if the *end* can not be changed accidentally in the graphical overview of the Innosoft Resource Planning."
          },
          "originalBegin": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ISExtendedDateTime"
              },
              {
                "readOnly": true,
                "description": "Values for this field will be ignored by PUT and POST requests. When the assignment is initially  created *originalBegin* receives its values from the *begin* property.Therefore this property is  **readonly** and is used to keep track of the planned begin.\n"
              }
            ]
          },
          "originalEnd": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ISExtendedDateTime"
              },
              {
                "readOnly": true,
                "description": "Values for this field will be ignored by PUT and POST requests. When the assignment is initially  created *originalEnd* receives its values from the *end* property. Therefore this property is  **readonly** and is used to keep track of the planned end.\n"
              }
            ]
          },
          "sendStatusId": {
            "type": "integer",
            "default": 0,
            "description": "Reference to one of the default Innosoft send status ids:\n* 0 = Undefined\n* 1 = To be sent\n* 2 = Sent\n* 3 = Received\n\nThere can also be custom ids for the *sendStatusId* which have to be defined in Innosoft first. The custom ids \ncan be referenced as well. They are saved in the table FELDINHALT (GRUPPE = 1).\n"
          },
          "planned": {
            "type": "boolean",
            "nullable": true,
            "default": false,
            "description": "Marks an absent assignment as planned which leads to a different color in the Innosoft Resource Planning."
          },
          "keyword": {
            "type": "string",
            "maxLength": 33,
            "readOnly": true,
            "description": "The value for keyword will be copied from the value of the code, that is referenced by the *codeId* Field.  Keyword is language specific for the user, who is currently authenticated for the request.\n"
          },
          "remark": {
            "type": "string",
            "maxLength": 33,
            "description": "Short description for the absent assignment."
          },
          "description": {
            "type": "string",
            "description": "Long description. Can be used to elaborate the remark."
          },
          "externalAssignment": {
            "type": "integer",
            "enum": [
              0,
              1
            ],
            "description": "Indicates independently from the codeId whether the assignment is internal or external.\n* 0 = internal\n* 1 = external\n"
          },
          "completionRate": {
            "type": "integer",
            "description": "Rough indicator of the completion degree of the assignment."
          },
          "weekend": {
            "type": "integer",
            "enum": [
              0,
              1,
              2,
              3,
              4
            ],
            "description": "Indicates whether and when to work at the weekend.\n* 0 = no work at the weekend\n* 1 = work at Saturday and Sunday\n* 2 = work at Saturday\n* 3 = work at Sunday\n* 4 = half day work at Saturday\n"
          },
          "workingHoursPerDay": {
            "type": "number",
            "format": "double",
            "description": ""
          },
          "options": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OptionsObject"
              },
              {
                "description": "A set of boolean values that controls checkboxes in the Innosoft Resource Planning.\n\n**Attention:** The values for CheckBox 4 - 13 will be removed by the ressource planning if not setup in the system.\n"
              }
            ]
          }
        }
      },
      "AddressAssignment": {
        "title": "Address assignment",
        "type": "object",
        "required": [
          "codeId",
          "begin",
          "end"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "The identifier for the assignment."
          },
          "resource": {
            "title": "Resource",
            "description": "Reference to an **Innosoft** resource (i.e. a technician or a utility vehicle). This property is mostly used to  delegate work to a technician. Can be omitted if you provide a *groupId*.\n\n**Please note**, that you must have permissions for the group and the main group of the *resource*. If you want to  move an assignment from one resource to another you need write permissions for the old group and main group  as well as the new group and main group of the destination resource.\n",
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "string",
                "maxLength": 20,
                "description": "Reference to the database field RESSLIST.RESSNR."
              },
              "immutable": {
                "type": "boolean",
                "nullable": true,
                "default": false,
                "description": "Defines, whether the resource can be changed in the graphical overview of the Innosoft Resource Planning."
              }
            }
          },
          "addressId": {
            "type": "string",
            "maxLength": 20,
            "description": "Reference to the *id* of an address (location or debtor)."
          },
          "codeId": {
            "type": "integer",
            "minimum": -32768,
            "maximum": 32767,
            "description": "Code for the classification of the assignment. Reference to the database field OPTION_K.KNR.\n(Remark: The value for the field *TYP* of the referenced entry in the OPTION_K table must be 1 or 2.)\n"
          },
          "begin": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ISExtendedDateTime"
              },
              {
                "description": "Begin of the assignment. This property is often used to mark the moment when a technician has to  start traveling to a site.\n\n(Remark: If you set the properties for hour, minute and second to *null* in the request  the time will default to the database field OPTION_E.ARBEITSBEGINN)\n"
              }
            ]
          },
          "end": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ISExtendedDateTime"
              },
              {
                "description": "End of the assignment. This property is often used to mark the moment when a technician has  finished the return trip from a site.\n\n**Attention:** The difference between begin and end must be **at least 15 minutes**.  Smaller periods are not supported by the Innosoft system.\n\n(Remark: If you set the properties for hour, minute and second to *null* in the request  the time will default to the database field OPTION_E.ARBEITSENDE)\n"
              }
            ]
          },
          "beginOfWork": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ISExtendedDateTime"
              },
              {
                "description": "Begin of work for an assignment. Has to lie in the interval *begin* and *end* of the assignment.\n\n**Default:** same value as *begin*.\n"
              }
            ]
          },
          "endOfWork": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ISExtendedDateTime"
              },
              {
                "description": "End of work for an assignment. Has to lie in the interval *begin* and *end* of the assignment.\n\n**Default:** same value as *end*.\n"
              }
            ]
          },
          "beginImmutable": {
            "type": "boolean",
            "nullable": true,
            "default": false,
            "description": "Marks if the *begin* and the *begin of work* can not be changed accidentally in the graphical overview  of the Innosoft Resource Planning.\n"
          },
          "endImmutable": {
            "type": "boolean",
            "nullable": true,
            "default": false,
            "description": "Marks if the *end* and the *end of work* can not be changed accidentally in the graphical overview  of the Innosoft Resource Planning.\n"
          },
          "originalBegin": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ISExtendedDateTime"
              },
              {
                "readOnly": true,
                "description": "Values for this field will be ignored by PUT and POST requests. When the assignment is initially  created *originalBegin* receives its values from the *begin* property.Therefore this property is  **readonly** and is used to keep track of the planned begin.\n"
              }
            ]
          },
          "originalEnd": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ISExtendedDateTime"
              },
              {
                "readOnly": true,
                "description": "Values for this field will be ignored by PUT and POST requests. When the assignment is initially  created *originalEnd* receives its values from the *end* property. Therefore this property is  **readonly** and is used to keep track of the planned end.\n"
              }
            ]
          },
          "mainGroupId": {
            "type": "integer",
            "description": "Reference to the database field OPTION_O.OGRNR.\n\n**Default:** if a resource is provided and the value of this property is *null* the *mainGroupId* \nof the resource will be used. Otherwise the value remains *null*.\n\nPlease note that that the authenticated user needs permissions for this main group. If you move the \nassignment from one main group to another you will need write permissions for the new *mainGroupId* \nas well as the old one.\n"
          },
          "groupId": {
            "type": "integer",
            "description": "Reference to the database field OPTION_G.GRNR.\n\nCan be omitted if you provide a *resource* with id. If you do not provide a *resource* this assignment \nis marked as a container assignment, meaning that it is only allocated to a specific group (and optional \na main group). This function is often used to plan an assignment in advance without knowing who will \naccomplish the work.\n\n**Default:** if a resource is provided and the value of this property is *null* the *groupId* of the \nresource will be copied.\n\nPlease note that you must have permissions for this group. If you move the assignment from one group to \nanother you will need write permissions for the new *groupId* as well as the old one.\n"
          },
          "sendStatusId": {
            "type": "integer",
            "default": 0,
            "description": "Reference to one of the default Innosoft send status ids:\n* 0 = Undefined\n* 1 = To be sent\n* 2 = Sent\n* 3 = Received\n\nThere can also be custom ids for the *sendStatusId* which have to be defined in Innosoft first. The custom ids \ncan be referenced as well. They are saved in the table FELDINHALT (GRUPPE = 1).\n"
          },
          "planned": {
            "type": "boolean",
            "nullable": true,
            "default": false,
            "description": "Marks an assignment as planned which leads to a different color in the Innosoft Resource Planning."
          },
          "keyword": {
            "type": "string",
            "maxLength": 33,
            "readOnly": true,
            "description": "The value for keyword will be copied from the value of the code, that is referenced by the *codeId* Field.  Keyword is language specific for the user, who is currently authenticated for the request.\n"
          },
          "remark": {
            "type": "string",
            "maxLength": 33,
            "description": "Short description what has to be done."
          },
          "description": {
            "type": "string",
            "description": "Long description of the assignment. Can be used to elaborate the remark."
          },
          "statusId": {
            "type": "integer",
            "description": "Reference to the database field AUSTATUS.NR. You can only set this property if you have a right to edit the status of assignments  (stored in PWUSER.PRIVFA at the index 25 (beginning from 0)). You can not create or edit an assignment if the address it belongs to is inactive.\n\nAdditional information: When you create a new assignment you can reference a status which marks the assignment  as closed for editing. However if you want to edit an already closed assignment you can not reference a closed  status in the request. If you want to change some properties of a closed assignment you have to reopen it  (you can change other properties in the same request) and close it again in a second request.\n"
          },
          "externalAssignment": {
            "type": "integer",
            "enum": [
              0,
              1
            ],
            "description": "Indicates independently from the *codeId* whether the assignment is internal or external.\n* 0 = internal\n* 1 = external\n"
          },
          "completionRate": {
            "type": "integer",
            "description": "Rough indicator of the completion degree of the assignment."
          },
          "weekend": {
            "type": "integer",
            "enum": [
              0,
              1,
              2,
              3,
              4
            ],
            "description": "Indicates whether and when to work at the weekend.\n* 0 = no work at the weekend\n* 1 = work at Saturday and Sunday\n* 2 = work at Saturday\n* 3 = work at Sunday\n* 4 = half day work at Saturday\n"
          },
          "workingHoursPerDay": {
            "type": "number",
            "format": "double",
            "description": ""
          },
          "options": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OptionsObject"
              },
              {
                "description": "A set of boolean values that controls checkboxes in the Innosoft Resource Planning.\n\n**Attention:** The values for CheckBox 4 - 13 will be removed by the ressource planning if not setup in the system.\n"
              }
            ]
          }
        }
      },
      "InternalAssignment": {
        "title": "Internal assignment",
        "type": "object",
        "required": [
          "codeId",
          "begin",
          "end"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "The identifier for the assignment."
          },
          "resource": {
            "title": "Resource",
            "description": "Reference to an **Innosoft** resource (i.e. a technician or a utility vehicle).\n\n**Please note**, that you must have permissions for the group and the main group of the resource. If you want to  move an assignment from one resource to another you need write permissions for the old group and main group  as well as the new group and main group of the destination resource.\n",
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "string",
                "maxLength": 20,
                "description": "Reference to the database field RESSLIST.RESSNR."
              },
              "immutable": {
                "type": "boolean",
                "nullable": true,
                "default": false,
                "description": "Defines, whether the resource can be changed in the graphical overview of the Innosoft Resource Planning."
              }
            }
          },
          "codeId": {
            "type": "integer",
            "minimum": -32768,
            "maximum": 32767,
            "description": "Code for the classification of the assignment. Reference to the database field OPTION_K.KNR.\n(Remark: The value for the field *TYP* of the referenced entry in the OPTION_K table must be 7.)\n"
          },
          "begin": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ISExtendedDateTime"
              },
              {
                "description": "Begin of the assignment.\n\n(Remark: If you set the properties for hour, minute and second to *null* in the request  the time will default to the database field OPTION_E.ARBEITSBEGINN)\n"
              }
            ]
          },
          "end": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ISExtendedDateTime"
              },
              {
                "description": "End of the assignment.\n\n**Attention:** The difference between begin and end must be **at least 15 minutes**.  Smaller periods are not supported by the Innosoft system.\n\n(Remark: If you set the properties for hour, minute and second to *null* in the request  the time will default to the database field OPTION_E.ARBEITSENDE)\n"
              }
            ]
          },
          "beginOfWork": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ISExtendedDateTime"
              },
              {
                "description": "Begin of work for an assignment. Has to lie in the interval *begin* and *end* of the assignment.\n\n**Default:** same value as *begin*.\n"
              }
            ]
          },
          "endOfWork": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ISExtendedDateTime"
              },
              {
                "description": "End of work for an assignment. Has to lie in the interval *begin* and *end* of the assignment.\n\n**Default:** same value as *end*.\n"
              }
            ]
          },
          "beginImmutable": {
            "type": "boolean",
            "nullable": true,
            "default": false,
            "description": "Marks if the *begin* can not be changed accidentally in the graphical overview of the Innosoft Resource Planning."
          },
          "endImmutable": {
            "type": "boolean",
            "nullable": true,
            "default": false,
            "description": "Marks if the *end* can not be changed accidentally in the graphical overview of the Innosoft Resource Planning."
          },
          "originalBegin": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ISExtendedDateTime"
              },
              {
                "readOnly": true,
                "description": "Values for this field will be ignored by PUT and POST requests. When the assignment is initially  created *originalBegin* receives its values from the *begin* property.Therefore this property is  **readonly** and is used to keep track of the planned begin.\n"
              }
            ]
          },
          "originalEnd": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ISExtendedDateTime"
              },
              {
                "readOnly": true,
                "description": "Values for this field will be ignored by PUT and POST requests. When the assignment is initially  created *originalEnd* receives its values from the *end* property. Therefore this property is  **readonly** and is used to keep track of the planned end.\n"
              }
            ]
          },
          "sendStatusId": {
            "type": "integer",
            "default": 0,
            "description": "Reference to one of the default Innosoft send status ids:\n* 0 = Undefined\n* 1 = To be sent\n* 2 = Sent\n* 3 = Received\n\nThere can also be custom ids for the *sendStatusId* which have to be defined in Innosoft first. The custom ids \ncan be referenced as well. They are saved in the table FELDINHALT (GRUPPE = 1).\n"
          },
          "planned": {
            "type": "boolean",
            "nullable": true,
            "default": false,
            "description": "Marks an assignment as planned which leads to a different color in the Innosoft Resource Planning."
          },
          "keyword": {
            "type": "string",
            "maxLength": 33,
            "readOnly": true,
            "description": "The value for keyword will be copied from the value of the code, that is referenced by the *codeId* Field.  Keyword is language specific for the user, who is currently authenticated for the request.\n"
          },
          "remark": {
            "type": "string",
            "maxLength": 33,
            "description": "Short description for the assignment."
          },
          "description": {
            "type": "string",
            "description": "Long description. Can be used to elaborate the remark."
          },
          "externalAssignment": {
            "type": "integer",
            "enum": [
              0,
              1
            ],
            "description": "Indicates independently from the codeId whether the assignment is internal or external.\n* 0 = internal\n* 1 = external\n"
          },
          "completionRate": {
            "type": "integer",
            "description": "Rough indicator of the completion degree of the assignment."
          },
          "weekend": {
            "type": "integer",
            "enum": [
              0,
              1,
              2,
              3,
              4
            ],
            "description": "Indicates whether and when to work at the weekend.\n* 0 = no work at the weekend\n* 1 = work at Saturday and Sunday\n* 2 = work at Saturday\n* 3 = work at Sunday\n* 4 = half day work at Saturday\n"
          },
          "workingHoursPerDay": {
            "type": "number",
            "format": "double",
            "description": ""
          },
          "options": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OptionsObject"
              },
              {
                "description": "A set of boolean values that controls checkboxes in the Innosoft Resource Planning.\n\n**Attention:** The values for CheckBox 4 - 13 will be removed by the ressource planning if not setup in the system.\n"
              }
            ]
          }
        }
      },
      "ProjectAssignment": {
        "title": "Project assignment",
        "type": "object",
        "required": [
          "codeId",
          "begin",
          "end"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "The identifier for the assignment."
          },
          "projectId": {
            "type": "string",
            "maxLength": 20,
            "description": "Reference to the project the assignment belongs to.\n**Default:** *projectId* of the project in the URL.\n"
          },
          "resource": {
            "title": "Resource",
            "description": "Reference to an **Innosoft** resource (i.e. a technician or a utility vehicle). Can be omitted if you provide a *groupId*.\n\n**Please note**, that you must have permissions for the group and the main group of the resource. If you want to  move an absent assignment from one resource to another you need write permissions for the old group and main group  as well as the new group and main group of the destination resource.\n",
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "string",
                "maxLength": 20,
                "description": "Reference to the database field RESSLIST.RESSNR."
              },
              "immutable": {
                "type": "boolean",
                "nullable": true,
                "default": false,
                "description": "Defines, whether the resource can be changed in the graphical overview of the Innosoft Resource Planning."
              }
            }
          },
          "codeId": {
            "type": "integer",
            "minimum": -32768,
            "maximum": 32767,
            "description": "Code for the classification of the assignment. Reference to the database field OPTION_K.KNR.\n(Remark: The value for the field *TYP* of the referenced entry in the OPTION_K table must be 5 or 6.)\n"
          },
          "begin": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ISExtendedDateTime"
              },
              {
                "description": "Begin of the assignment.\n\n(Remark: If you set the properties for hour, minute and second to *null* in the request  the time will default to the database field OPTION_E.ARBEITSBEGINN)\n"
              }
            ]
          },
          "end": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ISExtendedDateTime"
              },
              {
                "description": "End of the assignment.\n\n**Attention:** The difference between begin and end must be **at least 15 minutes**.  Smaller periods are not supported by the Innosoft system.\n\n(Remark: If you set the properties for hour, minute and second to *null* in the request  the time will default to the database field OPTION_E.ARBEITSENDE)\n"
              }
            ]
          },
          "beginOfWork": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ISExtendedDateTime"
              },
              {
                "description": "Begin of work for an assignment. Has to lie in the interval *begin* and *end* of the assignment.\n\n**Default:** same value as *begin*.\n"
              }
            ]
          },
          "endOfWork": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ISExtendedDateTime"
              },
              {
                "description": "End of work for an assignment. Has to lie in the interval *begin* and *end* of the assignment.\n\n**Default:** same value as *end*.\n"
              }
            ]
          },
          "beginImmutable": {
            "type": "boolean",
            "nullable": true,
            "default": false,
            "description": "Marks if the *begin* and the *begin of work* can not be changed accidentally in the graphical  overview of the Innosoft Resource Planning.\n"
          },
          "endImmutable": {
            "type": "boolean",
            "nullable": true,
            "default": false,
            "description": "Marks if the *end* and the *end of work* can not be changed accidentally in the graphical  overview of the Innosoft Resource Planning.\n"
          },
          "originalBegin": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ISExtendedDateTime"
              },
              {
                "readOnly": true,
                "description": "Values for this field will be ignored by PUT and POST requests. When the assignment is initially  created *originalBegin* receives its values from the *begin* property.Therefore this property is  **readonly** and is used to keep track of the planned begin.\n"
              }
            ]
          },
          "originalEnd": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ISExtendedDateTime"
              },
              {
                "readOnly": true,
                "description": "Values for this field will be ignored by PUT and POST requests. When the assignment is initially  created *originalEnd* receives its values from the *end* property. Therefore this property is  **readonly** and is used to keep track of the planned end.\n"
              }
            ]
          },
          "addressId": {
            "type": "string",
            "maxLength": 20,
            "description": "Reference to the *id* of an address (location or debtor).\n**Default:** locationId of the project.\n"
          },
          "mainGroupId": {
            "type": "integer",
            "description": "Reference to the database field OPTION_O.OGRNR.\n\n**Default:** if a resource is provided and the value of this property is *null* the *mainGroupId* \nof the resource will be used. Otherwise the value remains *null*.\n\nPlease note that that the authenticated user needs permissions for this main group. If you move the \nassignment from one main group to another you will need write permissions for the new *mainGroupId* \nas well as the old one.\n"
          },
          "groupId": {
            "type": "integer",
            "description": "Reference to the database field OPTION_G.GRNR.\n\nCan be omitted if you provide a *resource* with id. If you do not provide a *resource* this assignment \nis marked as a container assignment, meaning that it is only allocated to a specific group (and optional \na main group). This function is often used to plan an assignment in advance without knowing who will \naccomplish the work.\n\n**Default:** if a resource is provided and the value of this property is *null* the *groupId* of the \nresource will be copied.\n\nPlease note that you must have permissions for this group. If you move the assignment from one group to \nanother you will need write permissions for the new *groupId* as well as the old one.\n"
          },
          "sendStatusId": {
            "type": "integer",
            "default": 0,
            "description": "Reference to one of the default Innosoft send status ids:\n* 0 = Undefined\n* 1 = To be sent\n* 2 = Sent\n* 3 = Received\n\nThere can also be custom ids for the *sendStatusId* which have to be defined in Innosoft first. The custom ids \ncan be referenced as well. They are saved in the table FELDINHALT (GRUPPE = 1).\n"
          },
          "planned": {
            "type": "boolean",
            "nullable": true,
            "default": false,
            "description": "Marks an assignment as planned which leads to a different color in the Innosoft Resource Planning.  This is often used to show that it is not clarified if the assignment will be exactly in the given  period of time or if the assignment is needed at all.\n"
          },
          "keyword": {
            "type": "string",
            "maxLength": 33,
            "readOnly": true,
            "description": "Will be copied from the project when the assignment is created."
          },
          "remark": {
            "type": "string",
            "maxLength": 33,
            "description": "Short hint what has to be done."
          },
          "description": {
            "type": "string",
            "description": "Long description of the assignment. Can be used to elaborate the remark."
          },
          "statusId": {
            "type": "integer",
            "description": "Reference to the database field AUSTATUS.NR. You can only set this property if you have a right to edit the status of assignments  (stored in PWUSER.PRIVFA at the index 25 (beginning from 0)).\n\nYou can not reference a status which is less restrictive than the status of the project. I.e. if the status  of the project does not allow the editing of service reports you can not reference a status in the assignment which would allow it.\n\nYou can not create or edit an assignment if the project it belongs to does not allow the creation or the editing  of assignments anymore.\n\nWhen you create a new assignment you can reference a status which marks the assignment as closed for editing.  However if you want to edit an already closed assignment you can not reference a closed status in the request.  If you just want to change some properties of a closed assignment you have to reopen it (you can change other  properties in the same request) and close it again in a second request.\n"
          },
          "erpOrderNumber": {
            "type": "string",
            "maxLength": 33,
            "description": "Order number from an external system. Required if erpTicketNumber is provided."
          },
          "erpTicketNumber": {
            "type": "string",
            "maxLength": 33,
            "description": "Ticket number from an external system."
          },
          "externalAssignment": {
            "type": "integer",
            "enum": [
              0,
              1
            ],
            "description": "Indicates independently from the *codeId* whether the assignment is internal or external.\n* 0 = internal\n* 1 = external\n"
          },
          "completionRate": {
            "type": "integer",
            "description": "Rough indicator of the completion degree of the assignment."
          },
          "weekend": {
            "type": "integer",
            "enum": [
              0,
              1,
              2,
              3,
              4
            ],
            "description": "Indicates whether and when to work at the weekend.\n* 0 = no work at the weekend\n* 1 = work at Saturday and Sunday\n* 2 = work at Saturday\n* 3 = work at Sunday\n* 4 = half day work at Saturday\n"
          },
          "workingHoursPerDay": {
            "type": "number",
            "format": "double",
            "description": ""
          },
          "options": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OptionsObject"
              },
              {
                "description": "A set of boolean values that controls checkboxes in the Innosoft Resource Planning.\n\n**Attention:** The values for CheckBox 4 - 13 will be removed by the ressource planning if not setup in the system.\n"
              }
            ]
          }
        }
      },
      "Document": {
        "title": "Document",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the document."
          },
          "title": {
            "type": "string",
            "maxLength": 255,
            "description": "**Default:** *fileName* (without file extension)"
          },
          "fileName": {
            "type": "string",
            "maxLength": 255,
            "description": "Filename containing file extension (e.g. \"picture.png\").\n\nOnly mandatory if FileLocation.FileUrl refers to a file server resource.\n"
          },
          "fileLocation": {
            "title": "File location",
            "type": "object",
            "properties": {
              "locationId": {
                "type": "integer",
                "description": "Only mandatory if FileLocation.FileUrl refers to a file server resource."
              },
              "fileUrl": {
                "type": "string",
                "maxLength": 255,
                "description": "URL to the file content resource (HTTP-GET to receive the content bytes)."
              }
            }
          },
          "categoryId": {
            "type": "integer",
            "description": ""
          },
          "tags": {
            "description": "Search tags.",
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 100
            }
          },
          "description": {
            "type": "string",
            "maxLength": 200,
            "description": "Short message describing the content."
          },
          "externalId": {
            "type": "string",
            "maxLength": 255,
            "description": "Id the document is associated with in a third-party system."
          },
          "checksumHex": {
            "type": "string",
            "maxLength": 40,
            "description": "SHA1 checksum of the content bytes represented as hex string."
          },
          "contentType": {
            "type": "string",
            "maxLength": 255,
            "description": "Content type of the associated file (e.g. \"application/pdf\"). Should be compatible with the file  extension (e.g. don't use \"text/plain\" for \"picture.png\").\n\n**Default:** \"application/octet-stream\"\n"
          },
          "contentByteLength": {
            "type": "integer",
            "format": "int64",
            "description": "Number of content bytes"
          },
          "isOutgoing": {
            "type": "boolean",
            "description": "**Default:** null (= Incoming)"
          }
        }
      },
      "AssignmentMachine": {
        "title": "Assignment Machine",
        "type": "object",
        "properties": {
          "projectId": {
            "type": "string",
            "maxLength": 20,
            "readOnly": true,
            "description": "Id of the project (KUNDE.PROJNR)."
          },
          "assignmentId": {
            "type": "integer",
            "readOnly": true,
            "description": "Id of the assignment (PLANUNG.PINDEX)."
          },
          "machineId": {
            "type": "string",
            "maxLength": 20,
            "description": "Id of the machine (MAPARK.MASCHNR)."
          }
        }
      }
    },
    "parameters": {
      "ticketId": {
        "name": "ticketId",
        "in": "path",
        "description": "Unique identifier of a ticket.",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "ticketTextId": {
        "name": "textId",
        "in": "path",
        "description": "Unique identifier of a ticket text (ISGUID).",
        "required": true,
        "schema": {
          "type": "string",
          "maxLength": 50
        }
      },
      "ticketLevel": {
        "name": "level",
        "in": "path",
        "description": "The highest ticket level represents the current state of a ticket. Previous levels represent the non  editable history. Each forward results in a new level.\n",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "projectId": {
        "name": "projectId",
        "in": "path",
        "description": "Unique identifier of a project.",
        "required": true,
        "schema": {
          "type": "string",
          "maxLength": 20
        }
      },
      "addressId": {
        "name": "addressId",
        "in": "path",
        "description": "Unique identifier of an address.",
        "required": true,
        "schema": {
          "type": "string",
          "maxLength": 20
        }
      },
      "serviceReportId": {
        "name": "id",
        "in": "path",
        "required": true,
        "description": "Unique identifier of a service report.",
        "schema": {
          "type": "integer"
        }
      },
      "resourceId": {
        "name": "resourceId",
        "in": "path",
        "required": true,
        "description": "Unique identifier of a resource.",
        "schema": {
          "type": "string",
          "maxLength": 10
        }
      },
      "documentId": {
        "name": "id",
        "in": "path",
        "description": "Unique identifier of a document.",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "assignmentId": {
        "name": "assignmentId",
        "in": "path",
        "required": true,
        "description": "Identifies a project assignment combined with *projectId*.",
        "schema": {
          "type": "integer"
        }
      },
      "machineId": {
        "name": "machineId",
        "in": "path",
        "required": true,
        "description": "Unique identifier of a machine.",
        "schema": {
          "type": "string",
          "maxLength": 20
        }
      }
    }
  }
}
